# Data visualisation

## Learning objective

In this session, you will be able to understand:

1.  The basics of ggplot2 package
2.  How to create scatter plot, box plot, and bar plot
3.  Faceting
4.  How to customise plots (themes)
5.  Arranging plots
6.  Exporting plots

*Load package*

```{r}
#| message: false
library(tidyverse)
library(patchwork)
```

*Read data*

```{r}
surveys_new <- read_csv("data/surveys_new.csv")
```

Ggplot2

![](images/Screenshot%202023-04-08%20at%205.43.26%20PM.png){width="406"}

## Base plot

```{r}
ggplot(data = surveys_new,
       mapping = aes(x = education, y = age))
```

Add geom layer.

```{r}
ggplot(data = surveys_new,
       mapping = aes(x = age, y = birth_order_last_child)) +
  geom_point()
```

Assign plot to an object.

```{r}
p1 <- ggplot(data = surveys_new,
             mapping = aes(x = age, y = birth_order_last_child))

p1

p1 + geom_point()
```

## Build your plots iteratively

Below is the earlier plot.

```{r}
ggplot(data = surveys_new,
       aes(x = age, y = birth_order_last_child)) +
  geom_point()
```

The plot shows that the birth order of the last child is higher among older women. That makes sense.

But the points are too cramped and overlapped. Let's make the points more transparent by adding a transparency parameter (alpha) in `geom_point()`. Alpha ranges from 0 (totally transparent) to 1 (totally opaque).

```{r}
ggplot(data = surveys_new,
       aes(x = age, y = birth_order_last_child)) +
  geom_point(alpha = 0.2)
```

This looks better - we can now see that the points are clustered in the lower middle region between 20-35 years age group. But these points are still overlapping with each other, making it difficult to interpret.

Let's disperse the points a little bit in random direction. We can do that using `geom_jitter()`.

```{r}
ggplot(data = surveys_new,
       aes(x = age, y = birth_order_last_child)) +
  geom_jitter(alpha = 0.2)
```

Now, we see that most points are clustered between 20 and 30 years of age.

Now add a colour to all points.

```{r}
ggplot(data = surveys_new,
       aes(x = age, y = birth_order_last_child)) +
  geom_jitter(alpha = 0.2, colour = "blue")
```

We can also add colours by urban/rural residence (use `residence`). When the parameter value is a variable, we need to wrap `colour` in `aes()`.

```{r}
ggplot(data = surveys_new,
       aes(x = age, y = birth_order_last_child)) +
  geom_jitter(alpha = 0.2, aes(colour = residence))
```

We do not see any obvious difference in the distribution between urban and rural populations.

## Boxplot

```{r}
ggplot(data = surveys_new,
       mapping = aes(x = education, y = birth_order_last_child)) +
    geom_boxplot()
```

We can overlay points to the corresponding boxplot to have a better idea of the distribution of the measurements.

```{r}
ggplot(data = surveys_new,
       mapping = aes(x = education, y = birth_order_last_child)) +
    geom_boxplot(alpha = 0) +
    geom_jitter(alpha = 0.3, color = "tomato")
```

Now the boxplot is behind the points. Let's change the code to bring the boxplot to the front.

```{r}
ggplot(data = surveys_new,
       mapping = aes(x = education, y = birth_order_last_child)) +
    geom_jitter(alpha = 0.3, color = "tomato") +
    geom_boxplot(alpha = 0)
```

### Practice

1.  Boxplots are useful summaries, but hide the shape of the distribution. For example, if there is a bimodal distribution, it would not be observed with a boxplot. An alternative to the boxplot is the violin plot (sometimes known as a beanplot), where the shape (of the density of points) is drawn.

Replace the box plot with a violin plot; see `geom_violin()`.

```{r}
ggplot(data = surveys_new,
       mapping = aes(x = education, y = birth_order_last_child)) +
  geom_violin()
```

2.  So far, we've looked at the distribution of birth order within education attainment categories. Try making a new plot to explore the distribution of another variable within education attainment categories.

-   Create boxplot for birth order. Overlay the boxplot layer on a jitter layer to show actual measurements.

-   Add color to the data points on your boxplot according to urban/rural residence.

```{r}
ggplot(data = surveys_new,
       mapping = aes(x = education, y = birth_order_last_child)) +
  geom_jitter(alpha = 0.2, aes(colour = residence)) +
  geom_boxplot(alpha = 0)

```

## Bar plots

Let's count the mothers by their employment.

```{r}
surveys_new |> 
  count(wealth)
```

We can use a bar chart to display the distribution of wealth quantiles. Let's plot the employment on X-axis.

```{r}
ggplot(data = surveys_new, aes(x = wealth)) +
     geom_bar()
```

Let's tell ggplot to plot each wealth quintile using a distinct colour.

```{r}
ggplot(data = surveys_new, aes(x = wealth, fill = wealth)) +
    geom_bar()
```

Since the first argument of `ggplot()` is a dataframe for the plot, we can use `|>` to add data to `ggplot()`.

```{r}
surveys_new |> 
  ggplot(aes(x = wealth, fill = wealth)) +
  geom_bar()
```

### Practice

We have plotted wealth quintile vertically earlier. Now, plot the bars horizontally.

```{r}
surveys_new |> 
  ggplot(aes(y = wealth, fill = wealth)) +
  geom_bar()
```

## Faceting

Faceting is a powerful technique to plot subsets of data.

Let's plot wealth quintile horizontally and facet our data by `residence` using `facet_wrap()`.

```{r}
ggplot(data = surveys_new, aes(y = wealth, fill = wealth)) +
    geom_bar() +
    facet_wrap(facets = vars(residence))
```

Note that we need to wrap the facetting variable in `vars()`.

Now, let's disaggregate data in each facet by tetanus vaccination status using `facet_wrap()`.

```{r}
ggplot(surveys_new, aes(y = wealth, fill = tetanus_vacc)) +
  geom_bar() +
  facet_wrap(facets =  vars(residence))
```

`facet_wrap()` show the panels in one dimension with titles at the top.

We can also facet by both residence and tetanus vaccination status. Now, we want to facet the plot in two dimensions: residence on x-axis (panel title at the top) and age group on y-axis (panel title on the side). For that, we need to use `facet_grid()`.

```{r}
ggplot(surveys_new, aes(y = wealth, fill = tetanus_vacc)) +
  geom_bar() +
  facet_grid(rows = vars(agegrp), cols =  vars(residence))
```

You can also show the panels by rows.

```{r}
ggplot(surveys_new, aes(y = wealth, fill = tetanus_vacc)) +
  geom_bar() +
  facet_grid(rows = vars(agegrp))
```

Or by columns.

```{r}
ggplot(surveys_new, aes(y = wealth, fill = tetanus_vacc)) +
  geom_bar() +
  facet_grid(cols = vars(agegrp))
```

## Themes

In addition geoms and facets, we can change how the plot looks, like background colour, axis grids, font type/size, etc by using generic `theme()` function, as we will see below. There are also pre-defined themes already built in `ggplot2`. In the code below, `theme_bw()` produce a white background and dark panel borders, replacing the default grey background and white borders.

```{r}
ggplot(surveys_new, aes(y = wealth, fill = tetanus_vacc)) +
  geom_bar() +
  facet_wrap(vars(residence)) +
  theme_bw()
```

There are several other pre-defined themes that come with `ggplot2`.

-   `theme_linedraw()`
-   `theme_light()`
-   `theme_dark()`
-   `theme_minimal()`
-   `theme_classic()`
-   `theme_void()`

The `ggthemes` package provides a wide variety of options.

### Practice

Try different pre-defined themes from ggplot2 in the code below:

```{r}
ggplot(surveys_new, aes(y = wealth, fill = residence)) +
  geom_bar() +
  facet_wrap(vars(residence)) +
  theme_bw()
```

Use the theming you just learned to create a plot to show distribution of birth order of last child by education attainment faceted by residence.

```{r}
ggplot(surveys_new, aes(x = education, y = birth_order_last_child)) +
  geom_jitter(alpha = 0.2, colour = "salmon") +
  geom_boxplot(alpha = 0) +
  facet_wrap(vars(residence)) +
  theme_bw()
```

## Customisation

Take a look at the plot below and think of ways you could improve it.

```{r}
ggplot(surveys_new, aes(y = wealth, fill = residence)) +
  geom_bar() +
  facet_wrap(vars(residence)) +
  theme_bw()
```

First, let's change the axis titles to something more informative than `count` and `wealth`. Then, add a plot title. We will use `labs()` for that.

```{r}
ggplot(surveys_new, aes(y = wealth, fill = residence)) +
  geom_bar() +
  labs(x = "Number of mothers", y = "Wealth quintile",
       title = "Wealth quintile distribution by urban and rural residence") +
  facet_wrap(vars(residence)) +
  theme_bw()
```

Next, let's increase the font size to the texts more readable. We can do it using the generic `theme()` function.

```{r}
ggplot(surveys_new, aes(y = wealth, fill = residence)) +
  geom_bar() +
  labs(x = "Number of mothers", y = "Wealth quintile",
       title = "Wealth quintile distribution by urban and rural residence") +
  facet_wrap(vars(residence)) +
  theme_bw() +
  theme(text = element_text(size = 16))
```

We can change the facet label text (`strip.text`) to italicize the genus names.

```{r}
ggplot(surveys_new, aes(y = wealth, fill = residence)) +
  geom_bar() +
  labs(x = "Number of mothers", y = "Wealth quintile",
       title = "Wealth quintile distribution by urban and rural residence") +
  facet_wrap(vars(residence)) +
  theme_bw() +
  theme(
    strip.text = element_text(face = "italic"),
    text = element_text(size = 16)
  )
```

If you want to apply the same theme to other plots, we can save the theme as a R object and pipe it to other ggplot2 objects like this:

```{r}
my_theme <- theme_bw() +
  theme(
    strip.text = element_text(face = "italic"),
    text = element_text(size = 16)
  )

ggplot(surveys_new, aes(x = education, y = birth_order_last_child)) +
  geom_jitter(alpha = 0.2, colour = "salmon") +
  geom_boxplot(alpha = 0) +
  facet_wrap(vars(residence)) +
  my_theme
```

### Practice

With all of this information in hand, please take another five minutes to either improve the plot above.

Here are some ideas:

-   X-axis texts are not visible. See if you can rotate it to a certain degree.
-   Add titles for axes and a plot title.
-   Vertical gridlines seems redundant. Remove them.

## Arranging plots

Faceting is great for splitting a plot into multiple plots of the same type but sometimes we want to put together different plot types into one. In that case, we can use `patchwork` package to combine multiple ggplot2 objects. We can install the package using the following command.

```{r}
install.packages("patchwork")
```

After loading patchwork package, we now can use `+` to combine two plots side-by-side and use `/` to put together the plots vertically. `plot_layout()` can determine how much space each plot uses.

```{r}
library(patchwork)

p_birth <- ggplot(data = surveys_new,
             aes(x = age, y = birth_order_last_child)) +
  geom_jitter(alpha = 0.2, aes(colour = residence)) +
  labs(x = "Age of mothers", y = "Birth order of last child")

p_wealth <- ggplot(surveys_new, aes(y = wealth, fill = wealth)) +
  geom_bar() +
  labs(x = "Number of mothers", y = "Wealth quintile")

p_birth / p_wealth + 
  plot_layout(heights = c(3, 2))
```

`patchwork` can also produce more complex layouts. Check out [patchwork website](https://patchwork.data-imaginist.com/) for more examples.

## Exporting plots

After creating a plot, let's save it as a file. `ggplot2` supports many formats: png, jpeg, pdf, and svg are popular.

Export button in the Plots pane allows us to save the plot at low resolution by default. You can change the `height`, `width`, and `dpi` in the export box to save the plot at higher resolution.

If you want to save the plot programmatically, we can use `ggsave()` function to do it. We can also easily add the dimension parameters: `height`, `width`, and `dpi`.

```{r}
my_plot <-
  ggplot(surveys_new, aes(y = wealth, fill = residence)) +
  geom_bar() +
  labs(x = "Number of mothers", y = "Wealth quintile",
       title = "Wealth quintile distribution by urban and rural residence") +
  facet_wrap(vars(residence)) +
  theme_bw() +
  theme(
    strip.text = element_text(face = "italic"),
    text = element_text(size = 16)
  )
  
ggsave("figs/wealth_by_residence.png", my_plot, width = 15, height = 10)
```

This also works for plots combined with patchwork.

```{r}
plot_combined <- p_birth / p_wealth + 
  plot_layout(heights = c(3, 2))
  
ggsave("figs/plot_combined.png", plot_combined, width = 10, dpi = 300)
```
