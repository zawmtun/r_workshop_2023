# Introduction

## Creating objects in R

You get output from R simply by typing math in the console.

```{r}
#| eval: false
3 + 5
12 / 7
```

But to do useful and interesting things, we need to store these outputs to objects. To create an object, we need to give it a name followed by the assignment operator `<-`, and the value we want to give it.

```{r}
weight_kg <- 55
```

`<-` is the assignment operator. It assigns values on the right to objects on the left. So, after executing `x <- 3`, the value of x is `3`. For historical reason, you can also use `=` for assignment, but it does not work in every context. So, it is a good practice to use `<-` for assignment.

In RStudio, by default press `Alt` + `-` in Windows and `Options` + `-` in MacOS will write `<-` in a single keystroke. You can also modify these shortcut keys.

## Naming conventions in R

Object names can be anything such as `x`, `current_temperature`, or `subject_id` although there are some restrictions to it. Here are some guidelines on naming objects:

-   Object names should be explicit and not too long.
-   Names cannot start with a number (`2x` is not valid, but `x2` is).
-   R is case sensitive. So, `weight_kg` is different from `Weight_kg`.
-   Some names cannot be used because they are the names of fundamental functions in R (e.g., `if`, `else`, `for`, see [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html) for a complete list). In general, even if it is allowed, it is best to not use other function names (e.g., `c`, `T`, `mean`, `data`, `df`, `weights`). If you are not sure, check the help to see if the name is already in use.
-   It is recommended to use nouns for object names and verbs for function names.
-   Be consistent in the styling of your code, such as where you put spaces, how you name objects, etc. Naming styles include "lower_snake", "UPPER_SNAKE", "lowerCamelCase", "UpperCamelCase", etc. Using a consistent coding style makes your code easier to read for your future self and your collaborators. In R, three popular style guides come from [Google](https://google.github.io/styleguide/Rguide.xml), [Jean Fan](https://jef.works/R-style-guide/) and the [tidyverse](https://style.tidyverse.org/). The tidyverse style is very comprehensive and may seem overwhelming at first.

> Objects VS. variables
>
> What are known as `objects` in `R` are known as `variables` in many other programming languages. Depending on the context, `object` and `variable` can have drastically different meanings. However, in this lesson, the two words are used synonymously. For more information see: <https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects>

When assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:

```{r}
weight_kg <- 55    # doesn't print anything
(weight_kg <- 55)  # but putting parenthesis around the call prints the value of `weight_kg`
weight_kg          # and so does typing the name of the object
```

Now that you have created `weight_kg` object in R environment (i.e., in your computer memory), you can check whether that is the case by checking Environment pane (shortcut `Ctrl/Cmd` + `8`). You should see `weight_kg` and the associated value there.

Now, we can do arithmetic with `weight_kg`. For example, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg).

```{r}
2.2 * weight_kg
```

We can also change an object's value by assigning it a new one.

```{r}
weight_kg <- 57.5
2.2 * weight_kg
```

In R, assigning a value to one object does not change the values of other objects. For example, let's store the weight in pounds in a new object, `weight_lb`:

```{r}
weight_lb <- 2.2 * weight_kg
```

and then change weight_kg to 100.

```{r}
weight_kg <- 100
```

What do you think is the current content of the object `weight_lb`? 126.5 or 220?

## Saving your code in a R script

Until now, we have been typing code into the console. This is useful for quick queries but not so helpful if you want to revisit your work for any reason. For that, we need to save our code in a script. A script can be opened by pressing `Ctrl/Cmd` + `Shift` + `N`. It is wise to save your script file immediately (press `Ctrl/Cmd` + `S`). This will open a dialogue box where you can indicate where to save your script file, and what to name it. The `.R` file extension is added automatically. Dont' forget to save your work periodically by pressing `Ctrl/Cmd` + `S`.

## Comments

The comment character in R is `#`. Anything to the right of a `#` in a script will be ignored by R. This is useful for leaving notes and explanations in yoru scripts. RStudio provides a keyboard shortcut to comment or uncomment a paragraph: after selecting the lines you want to comment, press at the same time on your keyboard `Ctrl/Cmd` + `Shift` + `C`. If you only want to comment out one line, you can put the cursor at any location of that line (i.e., no need to select the whole line), then press `Ctrl/Cmd` + `Shift` + `C`.

*Challenge*

What are the values after each statement in the following?

```{r}
mass <- 47.5            # mass?
age  <- 122             # age?
mass <- mass * 2.0      # mass?
age  <- age - 20        # age?
mass_index <- mass/age  # mass_index?
```

## Functions and their arguments

## Vectors and data types

length()

Missing data
