# Introduction

Most of this chapter are adapted from [Data Carpentry's data analysis and visualization in R for ecologists](https://datacarpentry.org/R-ecology-lesson/index.html)

## Creating objects in R

You get output from R simply by typing math in the console.

```{r}
#| eval: false
3 + 5
12 / 7
```

But to do useful and interesting things, we need to store these outputs to objects. To create an object, we need to give it a name followed by the assignment operator `<-`, and the value we want to give it.

```{r}
weight_kg <- 55
```

`<-` is the assignment operator. It assigns values on the right to objects on the left. So, after executing `x <- 3`, the value of x is `3`. For historical reason, you can also use `=` for assignment, but it does not work in every context. So, it is a good practice to use `<-` for assignment.

In RStudio, by default press `Alt` + `-` in Windows and `Options` + `-` in MacOS will write `<-` in a single keystroke. You can also modify these shortcut keys.

## Naming conventions in R

Object names can be anything such as `x`, `current_temperature`, or `subject_id` although there are some restrictions to it. Here are some guidelines on naming objects:

-   Be explicit and not too long.
-   Cannot start with a number (`2x` is not valid, but `x2` is).
-   R is case sensitive. So, `weight_kg` is different from `Weight_kg`.
-   Some names cannot be used because they are reserved words in R (e.g., `if`, `else`, `for`, see [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html) for a complete list). In general, even if it is allowed, it is best to not use other function names (e.g., `c`, `T`, `mean`, `data`, `df`, `weights`). If you are not sure, check the help to see if the name is already in use.
-   Use nouns for object names and verbs for function names.
-   Be consistent in the styling of your code, such as where you put spaces, how you name objects, etc. Naming styles include "lower_snake", "UPPER_SNAKE", "lowerCamelCase", "UpperCamelCase", etc. Using a consistent coding style makes your code easier to read for your future self and your collaborators. In R, three popular style guides come from [Google](https://google.github.io/styleguide/Rguide.xml), [Jean Fan](https://jef.works/R-style-guide/) and the [tidyverse](https://style.tidyverse.org/). The tidyverse style is very comprehensive and may seem overwhelming at first.

> Objects VS. variables
>
> What are known as `objects` in `R` are known as `variables` in many other programming languages. Depending on the context, `object` and `variable` can have drastically different meanings. However, in this lesson, the two words are used synonymously. For more information see: <https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects>

When assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:

```{r}
weight_kg <- 55    # doesn't print anything
(weight_kg <- 55)  # but putting parenthesis around the call prints the value of `weight_kg`
weight_kg          # and so does typing the name of the object
```

Now that you have created `weight_kg` object in R environment (i.e., in your computer memory), you can check whether that is the case by checking Environment pane (shortcut `Ctrl/Cmd` + `8`). You should see `weight_kg` and the associated value there.

Now, we can do arithmetic with `weight_kg`. For example, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg).

```{r}
2.2 * weight_kg
```

We can also change an object's value by assigning it a new one.

```{r}
weight_kg <- 57.5
2.2 * weight_kg
```

In R, assigning a value to one object does not change the values of other objects. For example, let's store the weight in pounds in a new object, `weight_lb`:

```{r}
weight_lb <- 2.2 * weight_kg
```

and then change weight_kg to 100.

```{r}
weight_kg <- 100
```

What do you think is the current content of the object `weight_lb`? 126.5 or 220?

## Saving your code in a R script

Until now, we have been typing code into the console. This is useful for quick queries but not so helpful if you want to revisit your work for any reason. For that, we need to save our code in a script. A script can be opened by pressing `Ctrl/Cmd` + `Shift` + `N`. It is wise to save your script file immediately (press `Ctrl/Cmd` + `S`). This will open a dialogue box where you can indicate where to save your script file, and what to name it. The `.R` file extension is added automatically. Dont' forget to save your work periodically by pressing `Ctrl/Cmd` + `S`.

## Comments

The comment character in R is `#`. Anything to the right of a `#` in a script will be ignored by R. This is useful for leaving notes and explanations in yoru scripts. RStudio provides a keyboard shortcut to comment or uncomment a paragraph: after selecting the lines you want to comment, press at the same time on your keyboard `Ctrl/Cmd` + `Shift` + `C`. If you only want to comment out one line, you can put the cursor at any location of that line (i.e., no need to select the whole line), then press `Ctrl/Cmd` + `Shift` + `C`.

*Practice*

What are the values after each statement in the following?

```{r}
mass <- 47.5            # mass?
age  <- 122             # age?
mass <- mass * 2.0      # mass?
age  <- age - 20        # age?
mass_index <- mass/age  # mass_index?
```

## Functions and their arguments

Functions are pre-defined scripts that automate more complicated sets of commands. In addition functions built-in in R, more can be made available by importing R *packages* (more on that later). A function usually takes one or more inputs called *arguments*. Functions often (but not always) return a *value*. A typical example would be the function `sqrt()`. The input (the argument) must be a number, and the return value (output) is the square root of that number. Executing a function is called *calling* the function. An example of a function call is:

```{r}
weight_kg <- sqrt(10)
weight_kg
```

Here, the `sqrt()` function calculates the square root of the value of 10 and the return value is assigned to `weight_kg`. This function takes one argument, other functions might take several.

The return 'value' of a function need not be numerical (like that of `sqrt()`), and it also does not need to be a single item: it can be a set of things, or even a dataset. We'll see that when we read data files into R.

Arguments can be anything, not only numbers or filenames, but also other objects. Exactly what each argument means differs per function, and must be looked up in the documentation (see below). Some functions take arguments which may either be specified by the user, or, if left out, take on a *default* value. However, if you want something specific, you can specify a value of your choice which will be used instead of the default.

Let's try a function that can take multiple arguments: `round()`.

```{r}
round(3.2329)
```

Here, we have called `round()` with just one argument, `3.1329234`, and it has returned the value `3`. That's because the default is to round to the nearest whole number. If we want more digits we can see how to do that by looking at the documentation of the `round` function. We can look at the help for this function using `?round` or put your cursor on `round` and press F1.

In the documentation, we see that in addition a number, `round()` also takes digits argument that accepts a number indicating the number of decimal places. The default value of `digits` is 0: return a whole number. If we want a different decimal number, change `digits` argument.

```{r}
round(3.2329, digits = 2)
```

We can specify the argument value by position. Then, we don't need to add argument name in the function call. In `round()`, the first argument is a number and the second `digits`.

```{r}
round(3.2329, 2)
```

We can also specify the argument value by argument name.

```{r}
round(x = 3.2329, digits = 2)
```

This way the arguments can be in any position and is more fool-proof. Here, we specify `digits` first and `x` second.

```{r}
round(digits = 2, x = 3.2329)
```

## Vectors and data types

A vector is the most basic and ubiqutous data type in R. A vector is composed by a series of values, which can be either numbers or characters. We can put together a series of values as a vector using the `c()` function. For example we can create a vector of body weights and assign it to a new object `weight_kg`:

```{r}
weight_kg <- c(50, 60, 70, 80)
weight_kg
```

A vector can also contain characters:

```{r}
countries <- c("Pakistan", "Singapore", "Bangladesh")
countries
```

Characters are quoted in R. Without the quotes, R assumes that objects with names `Pakistan`, `Singapore`, and `Bangladesh` already exists in the environment (memory) and will look for those objects. When they are not found, R throws an error message.

There are many functions for vectors. `length()` returns the number of elements in a vector. The lengths of `weight_kg` and `countries` were 4 and 3, respectively.

```{r}
length(weight_kg)
length(countries)
```

We can use `c()` to add more elements to a vector.

Now, let's add a new number at the end of `weight_kg`.

```{r}
weight_kg <- c(weight_kg, 99)
weight_kg
```

Next, add a new number at the beginning of `weight_kg`.

```{r}
weight_kg <- c(40, weight_kg)
weight_kg
```

An atomic vector is the simplest vector of the same data type. These are the basic building blocks that all R objects are built from. We have seen two data types above: `numeric` (`double`) and `character`. The other four atomic data types are:

-   `logical`: `TRUE` and `FALSE` (the boolean data type)
-   `integer`: Integer numbers (e.g., `2L`, the `L` indicates to R that it's an integer)
-   `complex`: To represent complex numbers with real and imaginary parts (e.g., `1 + 4i`) and that's all we're going to say about them
-   `raw`: for bitstreams that we won't discuss further

You can also convert from one atomic data to another.

-   `as.numeric()`: Convert vector to a `double` vector
-   `as.integer()`: Convert vector to a `integer` vector
-   `as.character()`: Convert vector to a `character` vector
-   `as.logical()`: Convert vector to a `logical` vector

Atomic vectors are one of the many data structures support by R. Other important ones are lists (`list`), matrices (`matrix`), data frames (`data.frame`), factors (`factor`) and arrays (`array`).

### Practice

-   We've seen that atomic vectors can be of type character, numeric (or double), integer, and logical. But what happens if we try to mix these types in a single vector?

*R implicitly converts them to all be the same type*

-   What will happen in each of these examples? (hint: use `class()` to check the data type of your objects):

    ```{r}
    num_char <- c(1, 2, 3, "a")
    num_logical <- c(1, 2, 3, TRUE)
    char_logical <- c("a", "b", "c", TRUE)
    tricky <- c(1, 2, 3, "4")
    ```

-   Why do you think it happens?

Vectors can be of only one data type. R tries to convert (coerce) the content of this vector to find a "common denominator" that doesn't lose any information.

-   How many values in `combined_logical` are `"TRUE"` (as a character) in the following example (reusing the 2 `..._logical`s from above):

```{r}
combined_logical <- c(num_logical, char_logical)
```

-   You've probably noticed that objects of different types get converted into a single, shared type within a vector. In R, we call converting objects from one class into another class *coercion*. These conversions happen according to a hierarchy, whereby some types get preferentially coerced into other types. Can you draw a diagram that represents the hierarchy of how these data types are coerced?

logical → numeric → character ← logical

## Missing data

In R, missing data are represented in vectors as `NA`. When doing operations on numbers, most functions will return `NA` if your data include missing values. This feature makes it harder to overlook missing data. You can add the argument `na.rm = TRUE` to calculate the result as if the missing values were removed (`rm` stands for ReMoved) first.

```{r}
height_cm <- c(160, 180, NA, 167, 177)
mean(height_cm)
max(height_cm)
mean(height_cm, na.rm = TRUE)
max(height_cm, na.rm = TRUE)
```

If you want to programmatically check whether your data include `NA`, you can use `is.na()` to do it. The result is a logical vector of the same length with NA are indicated as `TRUE` and otherwise, `FALSE`. More on this later.

```{r}
is.na(height_cm)
```
