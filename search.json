[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An Introduction to Data Analysis with R",
    "section": "",
    "text": "Preparation\nWelcome to the workshop for an introduction to data analysis with R!\nThe focus of this workshop is primarily on familiarising the participants with R code and introducing some of the popular R packages for analysing data. We will cover the basics of R code, RStudio interface, importing CSV files, the structure of data frames, factors and dates, calculate summary statistics, and a brief introduction to plotting and regression analysis. We will go through these lessons in 10 hours spread over 5 days (2 hours per day).\nHowever, in-depth discussion of the epidemiological or statistical concepts are not within the scope of this workshop; we would need more than 10 learning hours for that!\nThis workshop does not assume any prior knowledge of R or RStudio or any prior programming experience."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "An Introduction to Data Analysis with R",
    "section": "Requirements",
    "text": "Requirements\nAll participants are required to use their own laptops throughout the workshop. You can follow the lessons with both Windows and Mac laptops. You must be able to install R and RStudio on your laptop. Please do the installations before the workshop begins.\nPlease make sure your laptop is fully charged each day before the workshop. We may not be able to provide enough electricity sockets for every participants."
  },
  {
    "objectID": "index.html#installations",
    "href": "index.html#installations",
    "title": "An Introduction to Data Analysis with R",
    "section": "Installations",
    "text": "Installations\nWe will need to install both R and RStudio for analysing data. R and RStudio are two separate pieces of software. Both are open-source: anyone can download them for free.\n\nR is a programming language particularly designed for data exploration, visualisation, and statistical analysis.\nRStudio is an integrated development environment that makes using R easier. RStudio is created by Posit, an open-source software company. We will use RStudio to interact with R in this workshop.\n\nPlease follow the instructions below based on your operating system.\nYou need to install R first and then install RStudio.\nIf you have installed an older version of R and RStudio or if you are not sure about the versions, please do a new installation.\n\nSteps for installing R and RStudio\n\nDownload R and RStudio installers from Posit website.\nRun the installer (.exe file for Windows and .pkg file for MacOS) for R\nRun the installer for RStudio\nOnce installed, open RStudio to check that it works and no error messages\n\n\n\nInstall necessary R packages\nWe will need tidyverse, broom, gtsummary, car, patchwork, flextable, and janitor packages to follow the lessons. Once you open RStudio, you will see the R Console pane on the left-side of your screen.\n\nPlease copy and paste the following code to R Console, next to > prompt and press Enter. This will automatically install necessary packages to your computer.\n\ninstall.packages(c(\"tidyverse\", \"broom\", \"gtsummary\", \"car\", \"patchwork\", \"flextable\", \"janitor\"))\n\nAlternatively, you can install the packages using RStudio’s graphical user interface by going to Tools > Install packages and type the names of the packages separated by a comma.\nR will try to download and install the packages on your computer. When the installation is complete, you can try to load the package by pasting the following code to the console.\n\nlibrary(tidyverse)\nlibrary(gtsummary)\nlibrary(car)\nlibrary(patchwork)\nlibrary(broom)\nlibrary(flextable)\nlibrary(janitor)\n\nIf you do not see an error like there is no package called ..., the package installation was successful."
  },
  {
    "objectID": "dataset.html",
    "href": "dataset.html",
    "title": "1  Download the data",
    "section": "",
    "text": "We will manually download the example dataset from this link. If you are expecting problems with the network, it may be better to download the data before the workshop and store it on your computer.\nThe example dataset is a simplified subset of the Myanmar Demographic Health Survey (2014-2015). In this analysis, we are primarily interested in maternal tetanus vaccination. Thus, women who reported at least one birth in the last five years were included in the dataset.\nMaternal tetanus vaccination was defined as newborns protected against neonatal tetanus. According to the Myanmar National Guidelines for Antenatal Care, a newborn is protected against neonatal tetanus if the mother has received any of the following:\n1. Two injections of tetanus toxoid containing vaccine during the last pregnancy\n2. Two or more injections, the last one within three years of the last pregnancy\n3. Three or more injections, the last one within five years of the last pregnancy\n4. Four or more injections, the last one within 10 years of the last pregnancy.\n5. Five or more injections at any time prior to the last pregnancy\nVariable names and their labels are listed below:\n\n\n\n\n\n\n\n\nNo.\nVariable name\nVariable label\n\n\n1\ncaseid\nID number of mothers\n\n\n2\nage\nAge in years\n\n\n3\nstate_region\nState or region of residence\n\n\n4\nresidence\nUrban or rural residence\n\n\n5\nbirth_order_last_child\nBirth order of last pregnancy\n\n\n6\neducation\nHighest education level of mothers\n\n\n7\nemploy\nMother’s occupation\n\n\n8\nwealth\nQuintiles of mother’s wealth index (specific to urban or rural areas)\n\n\n9\nget_help_permission\nGetting medical help for self: getting permission to go\n\n\n10\nperson_decides_healthcare\nPerson who usually decides on woman’s healthcare\n\n\n11\nget_help_not_go_alone\nGetting medical help for self: not wanting to go alone\n\n\n12\nget_help_money\nGetting medical help for self: getting money needed for treatment\n\n\n13\nget_help_distance_health_facility\nGetting medical help for self: distance to health facility\n\n\n14\nancplace\nType of facility where women received antenatal care\n\n\n15\ntetanus_vacc\nMaternal tetanus vaccination"
  },
  {
    "objectID": "intro.html#creating-objects-in-r",
    "href": "intro.html#creating-objects-in-r",
    "title": "2  Introduction",
    "section": "2.1 Creating objects in R",
    "text": "2.1 Creating objects in R\nYou get output from R simply by typing math in the console.\n\n3 + 5\n12 / 7\n\nBut to do useful and interesting things, we need to store these outputs to objects. To create an object, we need to give it a name followed by the assignment operator <-, and the value we want to give it.\n\nweight_kg <- 55\n\n<- is the assignment operator. It assigns values on the right to objects on the left. So, after executing x <- 3, the value of x is 3. For historical reason, you can also use = for assignment, but it does not work in every context. So, it is a good practice to use <- for assignment.\nIn RStudio, by default press Alt + - in Windows and Options + - in MacOS will write <- in a single keystroke. You can also modify these shortcut keys."
  },
  {
    "objectID": "intro.html#naming-conventions-in-r",
    "href": "intro.html#naming-conventions-in-r",
    "title": "2  Introduction",
    "section": "2.2 Naming conventions in R",
    "text": "2.2 Naming conventions in R\nObject names can be anything such as x, current_temperature, or subject_id although there are some restrictions to it. Here are some guidelines on naming objects:\n\nBe explicit and not too long.\nCannot start with a number (2x is not valid, but x2 is).\nR is case sensitive. So, weight_kg is different from Weight_kg.\nSome names cannot be used because they are reserved words in R (e.g., if, else, for, see here for a complete list). In general, even if it is allowed, it is best to not use other function names (e.g., c, T, mean, data, df, weights). If you are not sure, check the help to see if the name is already in use.\nUse nouns for object names and verbs for function names.\nBe consistent in the styling of your code, such as where you put spaces, how you name objects, etc. Naming styles include “lower_snake”, “UPPER_SNAKE”, “lowerCamelCase”, “UpperCamelCase”, etc. Using a consistent coding style makes your code easier to read for your future self and your collaborators. In R, three popular style guides come from Google, Jean Fan and the tidyverse. The tidyverse style is very comprehensive and may seem overwhelming at first.\n\n\nObjects VS. variables\nWhat are known as objects in R are known as variables in many other programming languages. Depending on the context, object and variable can have drastically different meanings. However, in this lesson, the two words are used synonymously. For more information see: https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects\n\nWhen assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:\n\nweight_kg <- 55    # doesn't print anything\n(weight_kg <- 55)  # but putting parenthesis around the call prints the value of `weight_kg`\n\n[1] 55\n\nweight_kg          # and so does typing the name of the object\n\n[1] 55\n\n\nNow that you have created weight_kg object in R environment (i.e., in your computer memory), you can check whether that is the case by checking Environment pane (shortcut Ctrl/Cmd + 8). You should see weight_kg and the associated value there.\nNow, we can do arithmetic with weight_kg. For example, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg).\n\n2.2 * weight_kg\n\n[1] 121\n\n\nWe can also change an object’s value by assigning it a new one.\n\nweight_kg <- 57.5\n2.2 * weight_kg\n\n[1] 126.5\n\n\nIn R, assigning a value to one object does not change the values of other objects. For example, let’s store the weight in pounds in a new object, weight_lb:\n\nweight_lb <- 2.2 * weight_kg\n\nand then change weight_kg to 100.\n\nweight_kg <- 100\n\nWhat do you think is the current content of the object weight_lb? 126.5 or 220?"
  },
  {
    "objectID": "intro.html#saving-your-code-in-a-r-script",
    "href": "intro.html#saving-your-code-in-a-r-script",
    "title": "2  Introduction",
    "section": "2.3 Saving your code in a R script",
    "text": "2.3 Saving your code in a R script\nUntil now, we have been typing code into the console. This is useful for quick queries but not so helpful if you want to revisit your work for any reason. For that, we need to save our code in a script. A script can be opened by pressing Ctrl/Cmd + Shift + N. It is wise to save your script file immediately (press Ctrl/Cmd + S). This will open a dialogue box where you can indicate where to save your script file, and what to name it. The .R file extension is added automatically. Dont’ forget to save your work periodically by pressing Ctrl/Cmd + S."
  },
  {
    "objectID": "intro.html#comments",
    "href": "intro.html#comments",
    "title": "2  Introduction",
    "section": "2.4 Comments",
    "text": "2.4 Comments\nThe comment character in R is #. Anything to the right of a # in a script will be ignored by R. This is useful for leaving notes and explanations in yoru scripts. RStudio provides a keyboard shortcut to comment or uncomment a paragraph: after selecting the lines you want to comment, press at the same time on your keyboard Ctrl/Cmd + Shift + C. If you only want to comment out one line, you can put the cursor at any location of that line (i.e., no need to select the whole line), then press Ctrl/Cmd + Shift + C.\nChallenge\nWhat are the values after each statement in the following?\n\nmass <- 47.5            # mass?\nage  <- 122             # age?\nmass <- mass * 2.0      # mass?\nage  <- age - 20        # age?\nmass_index <- mass/age  # mass_index?"
  },
  {
    "objectID": "intro.html#functions-and-their-arguments",
    "href": "intro.html#functions-and-their-arguments",
    "title": "2  Introduction",
    "section": "2.5 Functions and their arguments",
    "text": "2.5 Functions and their arguments\nFunctions are pre-defined scripts that automate more complicated sets of commands. In addition functions built-in in R, more can be made available by importing R packages (more on that later). A function usually takes one or more inputs called arguments. Functions often (but not always) return a value. A typical example would be the function sqrt(). The input (the argument) must be a number, and the return value (output) is the square root of that number. Executing a function is called calling the function. An example of a function call is:\n\nweight_kg <- sqrt(10)\nweight_kg\n\n[1] 3.162278\n\n\nHere, the sqrt() function calculates the square root of the value of 10 and the return value is assigned to weight_kg. This function takes one argument, other functions might take several.\nThe return ‘value’ of a function need not be numerical (like that of sqrt()), and it also does not need to be a single item: it can be a set of things, or even a dataset. We’ll see that when we read data files into R.\nArguments can be anything, not only numbers or filenames, but also other objects. Exactly what each argument means differs per function, and must be looked up in the documentation (see below). Some functions take arguments which may either be specified by the user, or, if left out, take on a default value. However, if you want something specific, you can specify a value of your choice which will be used instead of the default.\nLet’s try a function that can take multiple arguments: round().\n\nround(3.2329)\n\n[1] 3\n\n\nHere, we have called round() with just one argument, 3.1329234, and it has returned the value 3. That’s because the default is to round to the nearest whole number. If we want more digits we can see how to do that by looking at the documentation of the round function. We can look at the help for this function using ?round or put your cursor on round and press F1.\nIn the documentation, we see that in addition a number, round() also takes digits argument that accepts a number indicating the number of decimal places. The default value of digits is 0: return a whole number. If we want a different decimal number, change digits argument.\n\nround(3.2329, digits = 2)\n\n[1] 3.23\n\n\nWe can specify the argument value by position. Then, we don’t need to add argument name in the function call. In round(), the first argument is a number and the second digits.\n\nround(3.2329, 2)\n\n[1] 3.23\n\n\nWe can also specify the argument value by argument name.\n\nround(x = 3.2329, digits = 2)\n\n[1] 3.23\n\n\nThis way the arguments can be in any position and is more fool-proof. Here, we specify digits first and x second.\n\nround(digits = 2, x = 3.2329)\n\n[1] 3.23"
  },
  {
    "objectID": "intro.html#vectors-and-data-types",
    "href": "intro.html#vectors-and-data-types",
    "title": "2  Introduction",
    "section": "2.6 Vectors and data types",
    "text": "2.6 Vectors and data types\nA vector is the most basic and ubiqutous data type in R. A vector is composed by a series of values, which can be either numbers or characters. We can put together a series of values as a vector using the c() function. For example we can create a vector of body weights and assign it to a new object weight_kg:\n\nweight_kg <- c(50, 60, 70, 80)\nweight_kg\n\n[1] 50 60 70 80\n\n\nA vector can also contain characters:\n\ncountries <- c(\"Pakistan\", \"Singapore\", \"Bangladesh\")\ncountries\n\n[1] \"Pakistan\"   \"Singapore\"  \"Bangladesh\"\n\n\nCharacters are quoted in R. Without the quotes, R assumes that objects with names Pakistan, Singapore, and Bangladesh already exists in the environment (memory) and will look for those objects. When they are not found, R throws an error message.\nThere are many functions for vectors. length() returns the number of elements in a vector. The lengths of weight_kg and countries were 4 and 3, respectively.\n\nlength(weight_kg)\n\n[1] 4\n\nlength(countries)\n\n[1] 3\n\n\nWe can use c() to add more elements to a vector.\nNow, let’s add a new number at the end of weight_kg.\n\nweight_kg <- c(weight_kg, 99)\nweight_kg\n\n[1] 50 60 70 80 99\n\n\nNext, add a new number at the beginning of weight_kg.\n\nweight_kg <- c(40, weight_kg)\nweight_kg\n\n[1] 40 50 60 70 80 99\n\n\nAn atomic vector is the simplest vector of the same data type. These are the basic building blocks that all R objects are built from. We have seen two data types above: numeric (double) and character. The other four atomic data types are:\n\nlogical: TRUE and FALSE (the boolean data type)\ninteger: Integer numbers (e.g., 2L, the L indicates to R that it’s an integer)\ncomplex: To represent complex numbers with real and imaginary parts (e.g., 1 + 4i) and that’s all we’re going to say about them\nraw: for bitstreams that we won’t discuss further\n\nYou can also convert from one atomic data to another.\n\nas.numeric(): Convert vector to a double vector\nas.integer(): Convert vector to a integer vector\nas.character(): Convert vector to a character vector\nas.logical(): Convert vector to a logical vector\n\nAtomic vectors are one of the many data structures support by R. Other important ones are lists (list), matrices (matrix), data frames (data.frame), factors (factor) and arrays (array).\n\n2.6.1 Challenge\n\nWe’ve seen that atomic vectors can be of type character, numeric (or double), integer, and logical. But what happens if we try to mix these types in a single vector?\n\nR implicitly converts them to all be the same type\n\nWhat will happen in each of these examples? (hint: use class() to check the data type of your objects):\n\nnum_char <- c(1, 2, 3, \"a\")\nnum_logical <- c(1, 2, 3, TRUE)\nchar_logical <- c(\"a\", \"b\", \"c\", TRUE)\ntricky <- c(1, 2, 3, \"4\")\n\nWhy do you think it happens?\n\nVectors can be of only one data type. R tries to convert (coerce) the content of this vector to find a “common denominator” that doesn’t lose any information.\n\nHow many values in combined_logical are \"TRUE\" (as a character) in the following example (reusing the 2 ..._logicals from above):\n\n\ncombined_logical <- c(num_logical, char_logical)\n\n\nYou’ve probably noticed that objects of different types get converted into a single, shared type within a vector. In R, we call converting objects from one class into another class coercion. These conversions happen according to a hierarchy, whereby some types get preferentially coerced into other types. Can you draw a diagram that represents the hierarchy of how these data types are coerced?\n\nlogical → numeric → character ← logical"
  },
  {
    "objectID": "intro.html#missing-data",
    "href": "intro.html#missing-data",
    "title": "2  Introduction",
    "section": "2.7 Missing data",
    "text": "2.7 Missing data\nIn R, missing data are represented in vectors as NA. When doing operations on numbers, most functions will return NA if your data include missing values. This feature makes it harder to overlook missing data. You can add the argument na.rm = TRUE to calculate the result as if the missing values were removed (rm stands for ReMoved) first.\n\nheight_cm <- c(160, 180, NA, 167, 177)\nmean(height_cm)\n\n[1] NA\n\nmax(height_cm)\n\n[1] NA\n\nmean(height_cm, na.rm = TRUE)\n\n[1] 171\n\nmax(height_cm, na.rm = TRUE)\n\n[1] 180\n\n\nIf you want to programmatically check whether your data include NA, you can use is.na() to do it. The result is a logical vector of the same length with NA are indicated as TRUE and otherwise, FALSE. More on this later.\n\nis.na(height_cm)\n\n[1] FALSE FALSE  TRUE FALSE FALSE"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "3  Resources",
    "section": "",
    "text": "Data Carpentry: Data Analysis and Visualization in R for Ecologists\nR for data science\nQuarto website\ngtsummary website\nggplot2: Elegant Graphics for Data Analysis\nThe Epidemiologist R Handbook"
  }
]