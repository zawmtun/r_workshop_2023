[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An Introduction to Data Analysis with R",
    "section": "",
    "text": "Preparation\nWelcome to the workshop for an introduction to data analysis with R!\nThe focus of this workshop is primarily on familiarising the participants with R code and introducing some of the popular R packages for analysing data. We will cover the basics of R code, RStudio interface, importing CSV files, the structure of data frames, factors and dates, calculate summary statistics, and a brief introduction to plotting and regression analysis. We will go through these lessons in 10 hours spread over 5 days (2 hours per day).\nHowever, in-depth discussion of the epidemiological or statistical concepts are not within the scope of this workshop; we would need more than 10 learning hours for that!\nThis workshop does not assume any prior knowledge of R or RStudio or any prior programming experience."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "An Introduction to Data Analysis with R",
    "section": "Requirements",
    "text": "Requirements\nAll participants are required to use their own laptops throughout the workshop. You can follow the lessons with both Windows and Mac laptops. You must be able to install R and RStudio on your laptop. Please do the installations before the workshop begins.\nPlease make sure your laptop is fully charged each day before the workshop. We may not be able to provide enough electricity sockets for every participants."
  },
  {
    "objectID": "index.html#installations",
    "href": "index.html#installations",
    "title": "An Introduction to Data Analysis with R",
    "section": "Installations",
    "text": "Installations\nWe will need to install both R and RStudio for analysing data. R and RStudio are two separate pieces of software. Both are open-source: anyone can download them for free.\n\nR is a programming language particularly designed for data exploration, visualisation, and statistical analysis.\nRStudio is an integrated development environment that makes using R easier. RStudio is created by Posit, an open-source software company. We will use RStudio to interact with R in this workshop.\n\nPlease follow the instructions below based on your operating system.\nYou need to install R first and then install RStudio.\nIf you have installed an older version of R and RStudio or if you are not sure about the versions, please do a new installation.\n\nSteps for installing R and RStudio\n\nDownload R and RStudio installers from Posit website.\nRun the installer (.exe file for Windows and .pkg file for MacOS) for R\nRun the installer for RStudio\nOnce installed, open RStudio to check that it works and no error messages\n\n\n\nInstall necessary R packages\nWe will need tidyverse, broom, gtsummary, car, patchwork, and flextable packages to follow the lessons. Once you open RStudio, you will see the R Console pane on the left-side of your screen.\n\nPlease copy and paste the following code to R Console, next to > prompt and press Enter. This will automatically install necessary packages to your computer.\n\ninstall.packages(c(\"tidyverse\", \"broom\", \"gtsummary\", \"car\", \"patchwork\", \"flextable\"))\n\nAlternatively, you can install the packages using RStudio’s graphical user interface by going to Tools > Install packages and type the names of the packages separated by a comma.\nR will try to download and install the packages on your computer. When the installation is complete, you can try to load the package by pasting the following code to the console.\n\nlibrary(tidyverse)\nlibrary(gtsummary)\nlibrary(car)\nlibrary(patchwork)\nlibrary(broom)\nlibrary(flextable)\n\nIf you do not see an error like there is no package called ..., the package installation was successful."
  },
  {
    "objectID": "dataset.html#dataset",
    "href": "dataset.html#dataset",
    "title": "1  Download the dataset and slides",
    "section": "1.1 Dataset",
    "text": "1.1 Dataset\nWe will manually download the example dataset from this link. If you are expecting problems with the network, it may be better to download the data before the workshop and store it on your computer.\nThe example dataset is a simplified subset of the Myanmar Demographic Health Survey (2014-2015). In this analysis, we are primarily interested in maternal tetanus vaccination. Thus, women who reported at least one birth in the last five years were included in the dataset.\nMaternal tetanus vaccination was defined as newborns protected against neonatal tetanus. According to the Myanmar National Guidelines for Antenatal Care, a newborn is protected against neonatal tetanus if the mother has received any of the following:\n1. Two injections of tetanus toxoid containing vaccine during the last pregnancy\n2. Two or more injections, the last one within three years of the last pregnancy\n3. Three or more injections, the last one within five years of the last pregnancy\n4. Four or more injections, the last one within 10 years of the last pregnancy.\n5. Five or more injections at any time prior to the last pregnancy\nVariable names and their labels are listed below:\n\n\n\n\n\n\n\n\nNo.\nVariable name\nVariable label\n\n\n1\ncaseid\nID number of mothers\n\n\n2\nage\nAge in years\n\n\n3\nstate_region\nState or region of residence\n\n\n4\nresidence\nUrban or rural residence\n\n\n5\nbirth_order_last_child\nBirth order of last pregnancy\n\n\n6\neducation\nHighest education level of mothers\n\n\n7\nemploy\nMother’s occupation\n\n\n8\nwealth\nQuintiles of mother’s wealth index (specific to urban or rural areas)\n\n\n9\nget_help_permission\nGetting medical help for self: getting permission to go\n\n\n10\nperson_decides_healthcare\nPerson who usually decides on woman’s healthcare\n\n\n11\nget_help_not_go_alone\nGetting medical help for self: not wanting to go alone\n\n\n12\nget_help_money\nGetting medical help for self: getting money needed for treatment\n\n\n13\nget_help_distance_health_facility\nGetting medical help for self: distance to health facility\n\n\n14\nancplace\nType of facility where women received antenatal care\n\n\n15\ntetanus_vacc\nMaternal tetanus vaccination"
  },
  {
    "objectID": "dataset.html#slides",
    "href": "dataset.html#slides",
    "title": "1  Download the dataset and slides",
    "section": "1.2 Slides",
    "text": "1.2 Slides\nThe slides presented in the workshop can be downloaded from this link. Look for the green button [code] with a dropdown menu from which download the zip file. Then, unzip it on your computer. This is a work-in-progress. The files will be updated as we go along. Please download again at the end of the workshop for more complete files."
  },
  {
    "objectID": "intro.html#creating-objects-in-r",
    "href": "intro.html#creating-objects-in-r",
    "title": "2  Introduction",
    "section": "2.1 Creating objects in R",
    "text": "2.1 Creating objects in R\nYou get output from R simply by typing math in the console.\n\n3 + 5\n12 / 7\n\nBut to do useful and interesting things, we need to store these outputs to objects. To create an object, we need to give it a name followed by the assignment operator <-, and the value we want to give it.\n\nweight_kg <- 55\n\n<- is the assignment operator. It assigns values on the right to objects on the left. So, after executing x <- 3, the value of x is 3. For historical reason, you can also use = for assignment, but it does not work in every context. So, it is a good practice to use <- for assignment.\nIn RStudio, by default press Alt + - in Windows and Options + - in MacOS will write <- in a single keystroke. You can also modify these shortcut keys."
  },
  {
    "objectID": "intro.html#naming-conventions-in-r",
    "href": "intro.html#naming-conventions-in-r",
    "title": "2  Introduction",
    "section": "2.2 Naming conventions in R",
    "text": "2.2 Naming conventions in R\nObject names can be anything such as x, current_temperature, or subject_id although there are some restrictions to it. Here are some guidelines on naming objects:\n\nBe explicit and not too long.\nCannot start with a number (2x is not valid, but x2 is).\nR is case sensitive. So, weight_kg is different from Weight_kg.\nSome names cannot be used because they are reserved words in R (e.g., if, else, for, see here for a complete list). In general, even if it is allowed, it is best to not use other function names (e.g., c, T, mean, data, df, weights). If you are not sure, check the help to see if the name is already in use.\nUse nouns for object names and verbs for function names.\nBe consistent in the styling of your code, such as where you put spaces, how you name objects, etc. Naming styles include “lower_snake”, “UPPER_SNAKE”, “lowerCamelCase”, “UpperCamelCase”, etc. Using a consistent coding style makes your code easier to read for your future self and your collaborators. In R, three popular style guides come from Google, Jean Fan and the tidyverse. The tidyverse style is very comprehensive and may seem overwhelming at first.\n\n\nObjects VS. variables\nWhat are known as objects in R are known as variables in many other programming languages. Depending on the context, object and variable can have drastically different meanings. However, in this lesson, the two words are used synonymously. For more information see: https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects\n\nWhen assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:\n\nweight_kg <- 55    # doesn't print anything\n(weight_kg <- 55)  # but putting parenthesis around the call prints the value of `weight_kg`\n\n[1] 55\n\nweight_kg          # and so does typing the name of the object\n\n[1] 55\n\n\nNow that you have created weight_kg object in R environment (i.e., in your computer memory), you can check whether that is the case by checking Environment pane (shortcut Ctrl/Cmd + 8). You should see weight_kg and the associated value there.\nNow, we can do arithmetic with weight_kg. For example, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg).\n\n2.2 * weight_kg\n\n[1] 121\n\n\nWe can also change an object’s value by assigning it a new one.\n\nweight_kg <- 57.5\n2.2 * weight_kg\n\n[1] 126.5\n\n\nIn R, assigning a value to one object does not change the values of other objects. For example, let’s store the weight in pounds in a new object, weight_lb:\n\nweight_lb <- 2.2 * weight_kg\n\nand then change weight_kg to 100.\n\nweight_kg <- 100\n\nWhat do you think is the current content of the object weight_lb? 126.5 or 220?"
  },
  {
    "objectID": "intro.html#saving-your-code-in-a-r-script",
    "href": "intro.html#saving-your-code-in-a-r-script",
    "title": "2  Introduction",
    "section": "2.3 Saving your code in a R script",
    "text": "2.3 Saving your code in a R script\nUntil now, we have been typing code into the console. This is useful for quick queries but not so helpful if you want to revisit your work for any reason. For that, we need to save our code in a script. A script can be opened by pressing Ctrl/Cmd + Shift + N. It is wise to save your script file immediately (press Ctrl/Cmd + S). This will open a dialogue box where you can indicate where to save your script file, and what to name it. The .R file extension is added automatically. Dont’ forget to save your work periodically by pressing Ctrl/Cmd + S."
  },
  {
    "objectID": "intro.html#comments",
    "href": "intro.html#comments",
    "title": "2  Introduction",
    "section": "2.4 Comments",
    "text": "2.4 Comments\nThe comment character in R is #. Anything to the right of a # in a script will be ignored by R. This is useful for leaving notes and explanations in yoru scripts. RStudio provides a keyboard shortcut to comment or uncomment a paragraph: after selecting the lines you want to comment, press at the same time on your keyboard Ctrl/Cmd + Shift + C. If you only want to comment out one line, you can put the cursor at any location of that line (i.e., no need to select the whole line), then press Ctrl/Cmd + Shift + C.\nPractice\nWhat are the values after each statement in the following?\n\nmass <- 47.5            # mass?\nage  <- 122             # age?\nmass <- mass * 2.0      # mass?\nage  <- age - 20        # age?\nmass_index <- mass/age  # mass_index?"
  },
  {
    "objectID": "intro.html#functions-and-their-arguments",
    "href": "intro.html#functions-and-their-arguments",
    "title": "2  Introduction",
    "section": "2.5 Functions and their arguments",
    "text": "2.5 Functions and their arguments\nFunctions are pre-defined scripts that automate more complicated sets of commands. In addition functions built-in in R, more can be made available by importing R packages (more on that later). A function usually takes one or more inputs called arguments. Functions often (but not always) return a value. A typical example would be the function sqrt(). The input (the argument) must be a number, and the return value (output) is the square root of that number. Executing a function is called calling the function. An example of a function call is:\n\nweight_kg <- sqrt(10)\nweight_kg\n\n[1] 3.162278\n\n\nHere, the sqrt() function calculates the square root of the value of 10 and the return value is assigned to weight_kg. This function takes one argument, other functions might take several.\nThe return ‘value’ of a function need not be numerical (like that of sqrt()), and it also does not need to be a single item: it can be a set of things, or even a dataset. We’ll see that when we read data files into R.\nArguments can be anything, not only numbers or filenames, but also other objects. Exactly what each argument means differs per function, and must be looked up in the documentation (see below). Some functions take arguments which may either be specified by the user, or, if left out, take on a default value. However, if you want something specific, you can specify a value of your choice which will be used instead of the default.\nLet’s try a function that can take multiple arguments: round().\n\nround(3.2329)\n\n[1] 3\n\n\nHere, we have called round() with just one argument, 3.1329234, and it has returned the value 3. That’s because the default is to round to the nearest whole number. If we want more digits we can see how to do that by looking at the documentation of the round function. We can look at the help for this function using ?round or put your cursor on round and press F1.\nIn the documentation, we see that in addition a number, round() also takes digits argument that accepts a number indicating the number of decimal places. The default value of digits is 0: return a whole number. If we want a different decimal number, change digits argument.\n\nround(3.2329, digits = 2)\n\n[1] 3.23\n\n\nWe can specify the argument value by position. Then, we don’t need to add argument name in the function call. In round(), the first argument is a number and the second digits.\n\nround(3.2329, 2)\n\n[1] 3.23\n\n\nWe can also specify the argument value by argument name.\n\nround(x = 3.2329, digits = 2)\n\n[1] 3.23\n\n\nThis way the arguments can be in any position and is more fool-proof. Here, we specify digits first and x second.\n\nround(digits = 2, x = 3.2329)\n\n[1] 3.23"
  },
  {
    "objectID": "intro.html#vectors-and-data-types",
    "href": "intro.html#vectors-and-data-types",
    "title": "2  Introduction",
    "section": "2.6 Vectors and data types",
    "text": "2.6 Vectors and data types\nA vector is the most basic and ubiqutous data type in R. A vector is composed by a series of values, which can be either numbers or characters. We can put together a series of values as a vector using the c() function. For example we can create a vector of body weights and assign it to a new object weight_kg:\n\nweight_kg <- c(50, 60, 70, 80)\nweight_kg\n\n[1] 50 60 70 80\n\n\nA vector can also contain characters:\n\ncountries <- c(\"Pakistan\", \"Singapore\", \"Bangladesh\")\ncountries\n\n[1] \"Pakistan\"   \"Singapore\"  \"Bangladesh\"\n\n\nCharacters are quoted in R. Without the quotes, R assumes that objects with names Pakistan, Singapore, and Bangladesh already exists in the environment (memory) and will look for those objects. When they are not found, R throws an error message.\nThere are many functions for vectors. length() returns the number of elements in a vector. The lengths of weight_kg and countries were 4 and 3, respectively.\n\nlength(weight_kg)\n\n[1] 4\n\nlength(countries)\n\n[1] 3\n\n\nWe can use c() to add more elements to a vector.\nNow, let’s add a new number at the end of weight_kg.\n\nweight_kg <- c(weight_kg, 99)\nweight_kg\n\n[1] 50 60 70 80 99\n\n\nNext, add a new number at the beginning of weight_kg.\n\nweight_kg <- c(40, weight_kg)\nweight_kg\n\n[1] 40 50 60 70 80 99\n\n\nAn atomic vector is the simplest vector of the same data type. These are the basic building blocks that all R objects are built from. We have seen two data types above: numeric (double) and character. The other four atomic data types are:\n\nlogical: TRUE and FALSE (the boolean data type)\ninteger: Integer numbers (e.g., 2L, the L indicates to R that it’s an integer)\ncomplex: To represent complex numbers with real and imaginary parts (e.g., 1 + 4i) and that’s all we’re going to say about them\nraw: for bitstreams that we won’t discuss further\n\nYou can also convert from one atomic data to another.\n\nas.numeric(): Convert vector to a double vector\nas.integer(): Convert vector to a integer vector\nas.character(): Convert vector to a character vector\nas.logical(): Convert vector to a logical vector\n\nAtomic vectors are one of the many data structures support by R. Other important ones are lists (list), matrices (matrix), data frames (data.frame), factors (factor) and arrays (array).\n\n2.6.1 Practice\n\nWe’ve seen that atomic vectors can be of type character, numeric (or double), integer, and logical. But what happens if we try to mix these types in a single vector?\n\nR implicitly converts them to all be the same type\n\nWhat will happen in each of these examples? (hint: use class() to check the data type of your objects):\n\nnum_char <- c(1, 2, 3, \"a\")\nnum_logical <- c(1, 2, 3, TRUE)\nchar_logical <- c(\"a\", \"b\", \"c\", TRUE)\ntricky <- c(1, 2, 3, \"4\")\n\nWhy do you think it happens?\n\nVectors can be of only one data type. R tries to convert (coerce) the content of this vector to find a “common denominator” that doesn’t lose any information.\n\nHow many values in combined_logical are \"TRUE\" (as a character) in the following example (reusing the 2 ..._logicals from above):\n\n\ncombined_logical <- c(num_logical, char_logical)\n\n\nYou’ve probably noticed that objects of different types get converted into a single, shared type within a vector. In R, we call converting objects from one class into another class coercion. These conversions happen according to a hierarchy, whereby some types get preferentially coerced into other types. Can you draw a diagram that represents the hierarchy of how these data types are coerced?\n\nlogical → numeric → character ← logical"
  },
  {
    "objectID": "intro.html#missing-data",
    "href": "intro.html#missing-data",
    "title": "2  Introduction",
    "section": "2.7 Missing data",
    "text": "2.7 Missing data\nIn R, missing data are represented in vectors as NA. When doing operations on numbers, most functions will return NA if your data include missing values. This feature makes it harder to overlook missing data. You can add the argument na.rm = TRUE to calculate the result as if the missing values were removed (rm stands for ReMoved) first.\n\nheight_cm <- c(160, 180, NA, 167, 177)\nmean(height_cm)\n\n[1] NA\n\nmax(height_cm)\n\n[1] NA\n\nmean(height_cm, na.rm = TRUE)\n\n[1] 171\n\nmax(height_cm, na.rm = TRUE)\n\n[1] 180\n\n\nIf you want to programmatically check whether your data include NA, you can use is.na() to do it. The result is a logical vector of the same length with NA are indicated as TRUE and otherwise, FALSE. More on this later.\n\nis.na(height_cm)\n\n[1] FALSE FALSE  TRUE FALSE FALSE"
  },
  {
    "objectID": "dplyr.html#learning-objective",
    "href": "dplyr.html#learning-objective",
    "title": "3  Data Wrangling",
    "section": "3.1 Learning objective",
    "text": "3.1 Learning objective\nIn this session, you will be able to understand:\n\nHow to read a CSV file\nThe concept of tidy data\nHow to select columns and filter rows in a dataframe\nHow to use pipe\nHow to create new columns in a dataframe\nHow to aggregate data using summary statistics\n\nLoad package\n\nlibrary(tidyverse)\n\nRead data\n\nsurveys <- read_csv(\"data/dhs_myanmar_tetanus.csv\")\n\nRows: 3867 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (12): state_region, residence, education, employ, wealth, get_help_permi...\ndbl  (3): caseid, age, birth_order_last_child\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nread_csv() read in CSV file as a data.frame, a special data structure in R. data.frame is constructed by vectors: Each column is a vector and each vector has the same length.\nLet’s print surveys directly in the console.\n\nsurveys\n\n# A tibble: 3,867 × 15\n   caseid   age state_re…¹ resid…² birth…³ educa…⁴ employ wealth get_h…⁵ perso…⁶\n    <dbl> <dbl> <chr>      <chr>     <dbl> <chr>   <chr>  <chr>  <chr>   <chr>  \n 1      1    28 Region     Rural         1 Primary Agric… Third  Not a … By hus…\n 2      2    39 Region     Rural         5 Primary Agric… Lowest Not a … Self   \n 3      3    29 Region     Rural         3 Second… Sales  Lowest Not a … With h…\n 4      4    30 Region     Rural         2 Primary Agric… Lowest Not a … By hus…\n 5      5    28 Region     Rural         4 Primary Not w… Fourth Not a … Self   \n 6      6    23 Region     Rural         1 Second… Agric… Fourth Not a … By hus…\n 7      7    32 Region     Rural         4 Primary Not w… Lowest Not a … Self   \n 8      8    32 Region     Rural         2 Primary Sales  Third  Not a … Self   \n 9      9    46 Region     Rural         4 Primary Agric… Second Big pr… By hus…\n10     10    31 Region     Rural         1 Primary Agric… Second Not a … By hus…\n# … with 3,857 more rows, 5 more variables: get_help_not_go_alone <chr>,\n#   get_help_money <chr>, get_help_distance_health_facility <chr>,\n#   ancplace <chr>, tetanus_vacc <chr>, and abbreviated variable names\n#   ¹​state_region, ²​residence, ³​birth_order_last_child, ⁴​education,\n#   ⁵​get_help_permission, ⁶​person_decides_healthcare\n\n\nThe output shows that it is a tibble, a dataframe variant and the first 10 rows of the data with as many columns as the console screen can fit.\nWe can have an overview of the data using str().\n\nstr(surveys)\n\nspc_tbl_ [3,867 × 15] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ caseid                           : num [1:3867] 1 2 3 4 5 6 7 8 9 10 ...\n $ age                              : num [1:3867] 28 39 29 30 28 23 32 32 46 31 ...\n $ state_region                     : chr [1:3867] \"Region\" \"Region\" \"Region\" \"Region\" ...\n $ residence                        : chr [1:3867] \"Rural\" \"Rural\" \"Rural\" \"Rural\" ...\n $ birth_order_last_child           : num [1:3867] 1 5 3 2 4 1 4 2 4 1 ...\n $ education                        : chr [1:3867] \"Primary\" \"Primary\" \"Secondary\" \"Primary\" ...\n $ employ                           : chr [1:3867] \"Agricultural\" \"Agricultural\" \"Sales\" \"Agricultural\" ...\n $ wealth                           : chr [1:3867] \"Third\" \"Lowest\" \"Lowest\" \"Lowest\" ...\n $ get_help_permission              : chr [1:3867] \"Not a big problem\" \"Not a big problem\" \"Not a big problem\" \"Not a big problem\" ...\n $ person_decides_healthcare        : chr [1:3867] \"By husband, partner, or others\" \"Self\" \"With husband or partner\" \"By husband, partner, or others\" ...\n $ get_help_not_go_alone            : chr [1:3867] \"Not a big problem\" \"Not a big problem\" \"Big problem\" \"Not a big problem\" ...\n $ get_help_money                   : chr [1:3867] \"Big problem\" \"Big problem\" \"Big problem\" \"Not a big problem\" ...\n $ get_help_distance_health_facility: chr [1:3867] \"Not a big problem\" \"Not a big problem\" \"Big problem\" \"Not a big problem\" ...\n $ ancplace                         : chr [1:3867] \"Home\" \"Home\" \"Public health facilities\" \"Home\" ...\n $ tetanus_vacc                     : chr [1:3867] \"Vaccinated\" \"Vaccinated\" \"Vaccinated\" \"Vaccinated\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   caseid = col_double(),\n  ..   age = col_double(),\n  ..   state_region = col_character(),\n  ..   residence = col_character(),\n  ..   birth_order_last_child = col_double(),\n  ..   education = col_character(),\n  ..   employ = col_character(),\n  ..   wealth = col_character(),\n  ..   get_help_permission = col_character(),\n  ..   person_decides_healthcare = col_character(),\n  ..   get_help_not_go_alone = col_character(),\n  ..   get_help_money = col_character(),\n  ..   get_help_distance_health_facility = col_character(),\n  ..   ancplace = col_character(),\n  ..   tetanus_vacc = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nThe output shows that there are 3867 rows and 15 columns. The column names are listed following $. It also shows data type and first few values of each column.\nWe can also View() the dataframe like a spreadsheet. To do that, first put the cursor on the name of the dataframe and then press F2. Alternatively, you can type the following to the console:\n\nView(surveys)"
  },
  {
    "objectID": "dplyr.html#tidy-data",
    "href": "dplyr.html#tidy-data",
    "title": "3  Data Wrangling",
    "section": "3.2 Tidy data",
    "text": "3.2 Tidy data\nTidy data is a specific data structure mapping to its meaning. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types. In tidy data:\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value."
  },
  {
    "objectID": "dplyr.html#dplyr-functions",
    "href": "dplyr.html#dplyr-functions",
    "title": "3  Data Wrangling",
    "section": "3.3 dplyr functions",
    "text": "3.3 dplyr functions\ndplyr package consists of the following basic verbs in managing a dataframe.\n\nselect(): Select columns\nfilter(): Select rows based on conditions\nmutate(): Create new columns\ngroup_by() and summarize(): Create summary statistics on grouped data\narrange(): Sort results\ncount(): Count discrete values"
  },
  {
    "objectID": "dplyr.html#select-columns",
    "href": "dplyr.html#select-columns",
    "title": "3  Data Wrangling",
    "section": "3.4 Select columns",
    "text": "3.4 Select columns\nWe can keep columns of a dataframe by name. The code below keep age, education, ancplace from surveys dataset.\n\nselect(surveys, age, education, ancplace)\n\n# A tibble: 3,867 × 3\n     age education ancplace                \n   <dbl> <chr>     <chr>                   \n 1    28 Primary   Home                    \n 2    39 Primary   Home                    \n 3    29 Secondary Public health facilities\n 4    30 Primary   Home                    \n 5    28 Primary   Public health facilities\n 6    23 Secondary Home                    \n 7    32 Primary   Public health facilities\n 8    32 Primary   Public health facilities\n 9    46 Primary   Public health facilities\n10    31 Primary   None                    \n# … with 3,857 more rows\n\n\nWe can also select columns by sequence number (index) of columns. Let’s say we would like to keep first, third, and fifth columns.\n\nselect(surveys, 1, 3, 5)\n\n# A tibble: 3,867 × 3\n   caseid state_region birth_order_last_child\n    <dbl> <chr>                         <dbl>\n 1      1 Region                            1\n 2      2 Region                            5\n 3      3 Region                            3\n 4      4 Region                            2\n 5      5 Region                            4\n 6      6 Region                            1\n 7      7 Region                            4\n 8      8 Region                            2\n 9      9 Region                            4\n10     10 Region                            1\n# … with 3,857 more rows\n\n\nThere are a few helper functions that allows us to select columns more efficiently. These include:\n\nstarts_with() : Starts with an exact prefix.\nends_with() : Ends with an exact suffix.\ncontains() : Contains a literal string.\nmatches() : Matches a regular expression.\nnum_range() : Matches a numerical range like x01, x02, x03.\n\nFor example, we can select columns that starts with get_help.\n\nselect(surveys, starts_with(\"get_help\"))\n\n# A tibble: 3,867 × 4\n   get_help_permission get_help_not_go_alone get_help_money    get_help_distan…¹\n   <chr>               <chr>                 <chr>             <chr>            \n 1 Not a big problem   Not a big problem     Big problem       Not a big problem\n 2 Not a big problem   Not a big problem     Big problem       Not a big problem\n 3 Not a big problem   Big problem           Big problem       Big problem      \n 4 Not a big problem   Not a big problem     Not a big problem Not a big problem\n 5 Not a big problem   Not a big problem     Big problem       Big problem      \n 6 Not a big problem   Not a big problem     Not a big problem Not a big problem\n 7 Not a big problem   Big problem           Not a big problem Big problem      \n 8 Not a big problem   Big problem           Not a big problem Not a big problem\n 9 Big problem         Big problem           Big problem       Not a big problem\n10 Not a big problem   Big problem           Not a big problem Not a big problem\n# … with 3,857 more rows, and abbreviated variable name\n#   ¹​get_help_distance_health_facility\n\n\nWhat if we want to select columns that contains health in their names.\n\nselect(surveys, contains(\"health\"))\n\n# A tibble: 3,867 × 2\n   person_decides_healthcare      get_help_distance_health_facility\n   <chr>                          <chr>                            \n 1 By husband, partner, or others Not a big problem                \n 2 Self                           Not a big problem                \n 3 With husband or partner        Big problem                      \n 4 By husband, partner, or others Not a big problem                \n 5 Self                           Big problem                      \n 6 By husband, partner, or others Not a big problem                \n 7 Self                           Big problem                      \n 8 Self                           Not a big problem                \n 9 By husband, partner, or others Not a big problem                \n10 By husband, partner, or others Not a big problem                \n# … with 3,857 more rows\n\n\nWe can combine the helper functions with other selection methods. Here, we select caseid, age, and columns that starts with get_help.\n\nselect(surveys, caseid, age, starts_with(\"get_help\"))\n\n# A tibble: 3,867 × 6\n   caseid   age get_help_permission get_help_not_go_alone get_help_money get_h…¹\n    <dbl> <dbl> <chr>               <chr>                 <chr>          <chr>  \n 1      1    28 Not a big problem   Not a big problem     Big problem    Not a …\n 2      2    39 Not a big problem   Not a big problem     Big problem    Not a …\n 3      3    29 Not a big problem   Big problem           Big problem    Big pr…\n 4      4    30 Not a big problem   Not a big problem     Not a big pro… Not a …\n 5      5    28 Not a big problem   Not a big problem     Big problem    Big pr…\n 6      6    23 Not a big problem   Not a big problem     Not a big pro… Not a …\n 7      7    32 Not a big problem   Big problem           Not a big pro… Big pr…\n 8      8    32 Not a big problem   Big problem           Not a big pro… Not a …\n 9      9    46 Big problem         Big problem           Big problem    Not a …\n10     10    31 Not a big problem   Big problem           Not a big pro… Not a …\n# … with 3,857 more rows, and abbreviated variable name\n#   ¹​get_help_distance_health_facility\n\n\nRemove columns record_id and species_id from surveys dataset.\n\nselect(surveys, -age, -education, -ancplace)\n\n# A tibble: 3,867 × 12\n   caseid state_…¹ resid…² birth…³ employ wealth get_h…⁴ perso…⁵ get_h…⁶ get_h…⁷\n    <dbl> <chr>    <chr>     <dbl> <chr>  <chr>  <chr>   <chr>   <chr>   <chr>  \n 1      1 Region   Rural         1 Agric… Third  Not a … By hus… Not a … Big pr…\n 2      2 Region   Rural         5 Agric… Lowest Not a … Self    Not a … Big pr…\n 3      3 Region   Rural         3 Sales  Lowest Not a … With h… Big pr… Big pr…\n 4      4 Region   Rural         2 Agric… Lowest Not a … By hus… Not a … Not a …\n 5      5 Region   Rural         4 Not w… Fourth Not a … Self    Not a … Big pr…\n 6      6 Region   Rural         1 Agric… Fourth Not a … By hus… Not a … Not a …\n 7      7 Region   Rural         4 Not w… Lowest Not a … Self    Big pr… Not a …\n 8      8 Region   Rural         2 Sales  Third  Not a … Self    Big pr… Not a …\n 9      9 Region   Rural         4 Agric… Second Big pr… By hus… Big pr… Big pr…\n10     10 Region   Rural         1 Agric… Second Not a … By hus… Big pr… Not a …\n# … with 3,857 more rows, 2 more variables:\n#   get_help_distance_health_facility <chr>, tetanus_vacc <chr>, and\n#   abbreviated variable names ¹​state_region, ²​residence,\n#   ³​birth_order_last_child, ⁴​get_help_permission, ⁵​person_decides_healthcare,\n#   ⁶​get_help_not_go_alone, ⁷​get_help_money\n\n\n\n3.4.1 Practice\nSelect all columns that does not start with get_help.\n\nselect(surveys, -starts_with(\"get_help\"))\n\n# A tibble: 3,867 × 11\n   caseid   age state_re…¹ resid…² birth…³ educa…⁴ employ wealth perso…⁵ ancpl…⁶\n    <dbl> <dbl> <chr>      <chr>     <dbl> <chr>   <chr>  <chr>  <chr>   <chr>  \n 1      1    28 Region     Rural         1 Primary Agric… Third  By hus… Home   \n 2      2    39 Region     Rural         5 Primary Agric… Lowest Self    Home   \n 3      3    29 Region     Rural         3 Second… Sales  Lowest With h… Public…\n 4      4    30 Region     Rural         2 Primary Agric… Lowest By hus… Home   \n 5      5    28 Region     Rural         4 Primary Not w… Fourth Self    Public…\n 6      6    23 Region     Rural         1 Second… Agric… Fourth By hus… Home   \n 7      7    32 Region     Rural         4 Primary Not w… Lowest Self    Public…\n 8      8    32 Region     Rural         2 Primary Sales  Third  Self    Public…\n 9      9    46 Region     Rural         4 Primary Agric… Second By hus… Public…\n10     10    31 Region     Rural         1 Primary Agric… Second By hus… None   \n# … with 3,857 more rows, 1 more variable: tetanus_vacc <chr>, and abbreviated\n#   variable names ¹​state_region, ²​residence, ³​birth_order_last_child,\n#   ⁴​education, ⁵​person_decides_healthcare, ⁶​ancplace"
  },
  {
    "objectID": "dplyr.html#filter-rows",
    "href": "dplyr.html#filter-rows",
    "title": "3  Data Wrangling",
    "section": "3.5 Filter rows",
    "text": "3.5 Filter rows\nfilter() should be used together with logical operators that compares one or two columns.\n\nTable 1. Logical operators\n\n\nx < y\nx is smaller than y\n\n\nx > y\nx is greater than y\n\n\nx <= y\nx is smaller and equal to y\n\n\nx >= y\nx is greater and equal to y\n\n\nx == y\nx is equal to y\n\n\nx != y\nx is not equal to y\n\n\nx %in% y\nx is in the list of y\n\n\n!x %in% y\nx is not in the list of y\n\n\n\nHere are a few examples:\nThis code selects rows of mothers younger than 17.\n\nfilter(surveys, age < 17)\n\n# A tibble: 8 × 15\n  caseid   age state_reg…¹ resid…² birth…³ educa…⁴ employ wealth get_h…⁵ perso…⁶\n   <dbl> <dbl> <chr>       <chr>     <dbl> <chr>   <chr>  <chr>  <chr>   <chr>  \n1     61    16 Region      Rural         1 Second… Manual Lowest Not a … With h…\n2   1330    16 State       Rural         1 Primary Agric… Lowest Not a … With h…\n3   1861    16 State       Rural         1 Second… Not w… Second Not a … <NA>   \n4   1865    16 State       Rural         1 Second… Not w… Fourth Not a … With h…\n5   1918    15 State       Rural         1 Primary Not w… Lowest Not a … With h…\n6   3219    16 Region      Urban         1 Second… Not w… Second Not a … By hus…\n7   3423    15 State       Rural         1 No edu… Other  Fourth Not a … With h…\n8   3826    16 State       Rural         1 Primary Not w… Fourth Not a … With h…\n# … with 5 more variables: get_help_not_go_alone <chr>, get_help_money <chr>,\n#   get_help_distance_health_facility <chr>, ancplace <chr>,\n#   tetanus_vacc <chr>, and abbreviated variable names ¹​state_region,\n#   ²​residence, ³​birth_order_last_child, ⁴​education, ⁵​get_help_permission,\n#   ⁶​person_decides_healthcare\n\n\nThis code selects rows of mothers residing in rural areas.\n\nfilter(surveys, residence == \"Rural\")\n\n# A tibble: 2,986 × 15\n   caseid   age state_re…¹ resid…² birth…³ educa…⁴ employ wealth get_h…⁵ perso…⁶\n    <dbl> <dbl> <chr>      <chr>     <dbl> <chr>   <chr>  <chr>  <chr>   <chr>  \n 1      1    28 Region     Rural         1 Primary Agric… Third  Not a … By hus…\n 2      2    39 Region     Rural         5 Primary Agric… Lowest Not a … Self   \n 3      3    29 Region     Rural         3 Second… Sales  Lowest Not a … With h…\n 4      4    30 Region     Rural         2 Primary Agric… Lowest Not a … By hus…\n 5      5    28 Region     Rural         4 Primary Not w… Fourth Not a … Self   \n 6      6    23 Region     Rural         1 Second… Agric… Fourth Not a … By hus…\n 7      7    32 Region     Rural         4 Primary Not w… Lowest Not a … Self   \n 8      8    32 Region     Rural         2 Primary Sales  Third  Not a … Self   \n 9      9    46 Region     Rural         4 Primary Agric… Second Big pr… By hus…\n10     10    31 Region     Rural         1 Primary Agric… Second Not a … By hus…\n# … with 2,976 more rows, 5 more variables: get_help_not_go_alone <chr>,\n#   get_help_money <chr>, get_help_distance_health_facility <chr>,\n#   ancplace <chr>, tetanus_vacc <chr>, and abbreviated variable names\n#   ¹​state_region, ²​residence, ³​birth_order_last_child, ⁴​education,\n#   ⁵​get_help_permission, ⁶​person_decides_healthcare\n\n\nThis code selects rows of mothers who completed primary school.\n\nfilter(surveys, education == \"Primary\")\n\n# A tibble: 1,698 × 15\n   caseid   age state_re…¹ resid…² birth…³ educa…⁴ employ wealth get_h…⁵ perso…⁶\n    <dbl> <dbl> <chr>      <chr>     <dbl> <chr>   <chr>  <chr>  <chr>   <chr>  \n 1      1    28 Region     Rural         1 Primary Agric… Third  Not a … By hus…\n 2      2    39 Region     Rural         5 Primary Agric… Lowest Not a … Self   \n 3      4    30 Region     Rural         2 Primary Agric… Lowest Not a … By hus…\n 4      5    28 Region     Rural         4 Primary Not w… Fourth Not a … Self   \n 5      7    32 Region     Rural         4 Primary Not w… Lowest Not a … Self   \n 6      8    32 Region     Rural         2 Primary Sales  Third  Not a … Self   \n 7      9    46 Region     Rural         4 Primary Agric… Second Big pr… By hus…\n 8     10    31 Region     Rural         1 Primary Agric… Second Not a … By hus…\n 9     11    39 Region     Rural         3 Primary Agric… Third  Not a … By hus…\n10     13    42 Region     Rural         2 Primary Not w… Lowest Not a … Self   \n# … with 1,688 more rows, 5 more variables: get_help_not_go_alone <chr>,\n#   get_help_money <chr>, get_help_distance_health_facility <chr>,\n#   ancplace <chr>, tetanus_vacc <chr>, and abbreviated variable names\n#   ¹​state_region, ²​residence, ³​birth_order_last_child, ⁴​education,\n#   ⁵​get_help_permission, ⁶​person_decides_healthcare\n\n\nWe can also combine two or more logical comparisons using & (AND) and | (OR). For example, the code below selects rows of mothers younger than 17 residing in rural areas.\n\n\nfilter(surveys, age < 17 & residence == \"Rural\")\n\n# A tibble: 7 × 15\n  caseid   age state_reg…¹ resid…² birth…³ educa…⁴ employ wealth get_h…⁵ perso…⁶\n   <dbl> <dbl> <chr>       <chr>     <dbl> <chr>   <chr>  <chr>  <chr>   <chr>  \n1     61    16 Region      Rural         1 Second… Manual Lowest Not a … With h…\n2   1330    16 State       Rural         1 Primary Agric… Lowest Not a … With h…\n3   1861    16 State       Rural         1 Second… Not w… Second Not a … <NA>   \n4   1865    16 State       Rural         1 Second… Not w… Fourth Not a … With h…\n5   1918    15 State       Rural         1 Primary Not w… Lowest Not a … With h…\n6   3423    15 State       Rural         1 No edu… Other  Fourth Not a … With h…\n7   3826    16 State       Rural         1 Primary Not w… Fourth Not a … With h…\n# … with 5 more variables: get_help_not_go_alone <chr>, get_help_money <chr>,\n#   get_help_distance_health_facility <chr>, ancplace <chr>,\n#   tetanus_vacc <chr>, and abbreviated variable names ¹​state_region,\n#   ²​residence, ³​birth_order_last_child, ⁴​education, ⁵​get_help_permission,\n#   ⁶​person_decides_healthcare\n\n\nThe code below select rows within age range of 18 and 22.\n\nfilter(surveys, age >= 18 & age <= 22)\n\n# A tibble: 415 × 15\n   caseid   age state_re…¹ resid…² birth…³ educa…⁴ employ wealth get_h…⁵ perso…⁶\n    <dbl> <dbl> <chr>      <chr>     <dbl> <chr>   <chr>  <chr>  <chr>   <chr>  \n 1     19    19 State      Rural         1 Second… Manual Lowest Not a … By hus…\n 2     27    21 State      Urban         3 Primary Not w… Lowest Not a … Self   \n 3     38    20 Region     Rural         2 Primary Not w… Lowest Not a … With h…\n 4     45    21 State      Rural         1 Primary Manual Fourth Not a … Self   \n 5     54    21 Region     Rural         1 More t… Not w… Highe… Not a … By hus…\n 6     58    22 Region     Rural         2 Primary Not w… Lowest Not a … Self   \n 7     69    20 State      Rural         1 Second… Not w… Third  Not a … Self   \n 8     70    19 State      Rural         1 Second… Manual Fourth Not a … Self   \n 9    117    22 State      Rural         2 No edu… Manual Second Not a … By hus…\n10    122    19 State      Rural         2 No edu… Not w… Second Not a … With h…\n# … with 405 more rows, 5 more variables: get_help_not_go_alone <chr>,\n#   get_help_money <chr>, get_help_distance_health_facility <chr>,\n#   ancplace <chr>, tetanus_vacc <chr>, and abbreviated variable names\n#   ¹​state_region, ²​residence, ³​birth_order_last_child, ⁴​education,\n#   ⁵​get_help_permission, ⁶​person_decides_healthcare\n\n\nThe code below select rows with mothers younger than 17 or older than 45.\n\nfilter(surveys, age < 17 | age > 45)\n\n# A tibble: 79 × 15\n   caseid   age state_re…¹ resid…² birth…³ educa…⁴ employ wealth get_h…⁵ perso…⁶\n    <dbl> <dbl> <chr>      <chr>     <dbl> <chr>   <chr>  <chr>  <chr>   <chr>  \n 1      9    46 Region     Rural         4 Primary Agric… Second Big pr… By hus…\n 2     23    46 State      Rural         7 Second… Manual Fourth Not a … With h…\n 3     61    16 Region     Rural         1 Second… Manual Lowest Not a … With h…\n 4     80    46 State      Rural         8 Primary Not w… Second Not a … With h…\n 5     93    46 Region     Rural         6 Primary Manual Highe… Not a … With h…\n 6    104    46 State      Rural         4 Primary Sales  Third  Not a … Self   \n 7    130    47 State      Urban         3 More t… Other  Fourth Not a … <NA>   \n 8    220    46 Region     Rural         8 No edu… Agric… Third  Not a … Self   \n 9    310    46 State      Rural         8 Primary Not w… Third  Not a … By hus…\n10    315    46 State      Rural         9 Primary Manual Highe… Not a … By hus…\n# … with 69 more rows, 5 more variables: get_help_not_go_alone <chr>,\n#   get_help_money <chr>, get_help_distance_health_facility <chr>,\n#   ancplace <chr>, tetanus_vacc <chr>, and abbreviated variable names\n#   ¹​state_region, ²​residence, ³​birth_order_last_child, ⁴​education,\n#   ⁵​get_help_permission, ⁶​person_decides_healthcare\n\n\n\n3.5.1 Practice\nFilter rows with mothers residing in rural areas with highest education of primary school who gave birth at a public health facility.\n\nfilter(surveys, education == \"Primary\" & residence == \"Rural\" & ancplace == \"Public health facilities\")\n\n# A tibble: 857 × 15\n   caseid   age state_re…¹ resid…² birth…³ educa…⁴ employ wealth get_h…⁵ perso…⁶\n    <dbl> <dbl> <chr>      <chr>     <dbl> <chr>   <chr>  <chr>  <chr>   <chr>  \n 1      5    28 Region     Rural         4 Primary Not w… Fourth Not a … Self   \n 2      7    32 Region     Rural         4 Primary Not w… Lowest Not a … Self   \n 3      8    32 Region     Rural         2 Primary Sales  Third  Not a … Self   \n 4      9    46 Region     Rural         4 Primary Agric… Second Big pr… By hus…\n 5     20    45 State      Rural         8 Primary Not w… Third  Not a … Self   \n 6     21    37 State      Rural         6 Primary Not w… Lowest Not a … Self   \n 7     34    32 Region     Rural         3 Primary Sales  Highe… Not a … With h…\n 8     35    38 Region     Rural         2 Primary Sales  Fourth Not a … Self   \n 9     38    20 Region     Rural         2 Primary Not w… Lowest Not a … With h…\n10     39    28 State      Rural         2 Primary Manual Second Big pr… With h…\n# … with 847 more rows, 5 more variables: get_help_not_go_alone <chr>,\n#   get_help_money <chr>, get_help_distance_health_facility <chr>,\n#   ancplace <chr>, tetanus_vacc <chr>, and abbreviated variable names\n#   ¹​state_region, ²​residence, ³​birth_order_last_child, ⁴​education,\n#   ⁵​get_help_permission, ⁶​person_decides_healthcare"
  },
  {
    "objectID": "dplyr.html#pipes",
    "href": "dplyr.html#pipes",
    "title": "3  Data Wrangling",
    "section": "3.6 Pipes",
    "text": "3.6 Pipes\nConsider the following commands. We first select rows and feed the resulting dataframe to the following line to select columns.\n\nsurveys2 <- filter(surveys, age < 17)\nsurveys_demo <- select(surveys2, age, residence, employ)\nsurveys_demo\n\n# A tibble: 8 × 3\n    age residence employ      \n  <dbl> <chr>     <chr>       \n1    16 Rural     Manual      \n2    16 Rural     Agricultural\n3    16 Rural     Not working \n4    16 Rural     Not working \n5    15 Rural     Not working \n6    16 Urban     Not working \n7    15 Rural     Other       \n8    16 Rural     Not working \n\n\nAnother option of doing the same thing is to nest these two functions together.\n\nsurveys_demo <- select(filter(surveys, age < 17), age, residence, employ)\n\nWe can also use pipe |>.\n\nsurveys_demo <- surveys |> # and then; it plugs the output to the first position of the following row.\n  filter(age < 17) |> \n  select(age, residence, employ)\n\nsurveys_demo\n\n# A tibble: 8 × 3\n    age residence employ      \n  <dbl> <chr>     <chr>       \n1    16 Rural     Manual      \n2    16 Rural     Agricultural\n3    16 Rural     Not working \n4    16 Rural     Not working \n5    15 Rural     Not working \n6    16 Urban     Not working \n7    15 Rural     Other       \n8    16 Rural     Not working \n\n\nFor completeness, here is another commonly used pipe %>%.\n\nsurveys %>%\n  filter(age < 17) %>%\n  select(age, residence, employ)\n\n# A tibble: 8 × 3\n    age residence employ      \n  <dbl> <chr>     <chr>       \n1    16 Rural     Manual      \n2    16 Rural     Agricultural\n3    16 Rural     Not working \n4    16 Rural     Not working \n5    15 Rural     Not working \n6    16 Urban     Not working \n7    15 Rural     Other       \n8    16 Rural     Not working \n\n\n\n3.6.1 Practice\nUsing pipes, select the surveys data to include mothers gave birth to their last child at home and retain only columns age, ancplace, and tetanus_vacc\n\nsurveys |> \n  filter(ancplace == \"Home\") |> \n  select(age, ancplace, tetanus_vacc)\n\n# A tibble: 583 × 3\n     age ancplace tetanus_vacc\n   <dbl> <chr>    <chr>       \n 1    28 Home     Vaccinated  \n 2    39 Home     Vaccinated  \n 3    30 Home     Vaccinated  \n 4    23 Home     Vaccinated  \n 5    39 Home     Unvaccinated\n 6    42 Home     Vaccinated  \n 7    44 Home     Unvaccinated\n 8    21 Home     Vaccinated  \n 9    36 Home     Unvaccinated\n10    27 Home     Vaccinated  \n# … with 573 more rows"
  },
  {
    "objectID": "dplyr.html#create-new-columns",
    "href": "dplyr.html#create-new-columns",
    "title": "3  Data Wrangling",
    "section": "3.7 Create new columns",
    "text": "3.7 Create new columns\nLet’s create a new column that has double the age of mothers. Then, select the original and the newly created column.\n\nsurveys |> \n  mutate(age2 = age * 2) |> \n  select(age, age2)\n\n# A tibble: 3,867 × 2\n     age  age2\n   <dbl> <dbl>\n 1    28    56\n 2    39    78\n 3    29    58\n 4    30    60\n 5    28    56\n 6    23    46\n 7    32    64\n 8    32    64\n 9    46    92\n10    31    62\n# … with 3,857 more rows\n\n\nNext, let’s create a new column of age group including the following categories: 15-24, 25-29, 30-34, 34-49.\nTo do that, we use case_when() in which each age group and the corresponding logical statement are linked using a ~. .default = \"Unknown\" will label the rows that do not match any of the above conditions as Unknown.\n\nsurveys_new <- surveys |> \n  mutate(\n    agegrp = case_when(\n      age >= 15 & age <= 24 ~ \"15-24\",\n      age >= 25 & age <= 29 ~ \"25-29\",\n      age >= 30 & age <= 34 ~ \"30-34\",\n      age >= 35 & age <= 49 ~ \"34-49\",\n      .default = \"Unknown\"\n    )\n  )\n\nLet’s check if the grouping is done correctly.\n\nsurveys_new |> \n  select(age, agegrp) |> \n  table()\n\n    agegrp\nage  15-24 25-29 30-34 34-49\n  15     2     0     0     0\n  16     6     0     0     0\n  17     7     0     0     0\n  18    21     0     0     0\n  19    59     0     0     0\n  20    94     0     0     0\n  21   105     0     0     0\n  22   136     0     0     0\n  23   139     0     0     0\n  24   152     0     0     0\n  25     0   179     0     0\n  26     0   196     0     0\n  27     0   225     0     0\n  28     0   202     0     0\n  29     0   191     0     0\n  30     0     0   222     0\n  31     0     0   185     0\n  32     0     0   195     0\n  33     0     0   179     0\n  34     0     0   169     0\n  35     0     0     0   173\n  36     0     0     0   132\n  37     0     0     0   157\n  38     0     0     0   129\n  39     0     0     0   123\n  40     0     0     0   128\n  41     0     0     0    86\n  42     0     0     0    76\n  43     0     0     0    40\n  44     0     0     0    51\n  45     0     0     0    37\n  46     0     0     0    40\n  47     0     0     0    16\n  48     0     0     0    14\n  49     0     0     0     1\n\n\n\n3.7.1 Practice\nCreate a new dataframe from the surveys with a new column that lumps the birth order of last child of 4 and above into a single group. Name the new column as birth_order_last_child_grp.\nHint: Think carefully about what to use as default.\n\nsurveys_new <- surveys_new |> \n  mutate(\n    birth_order_last_child_grp = case_when(\n      birth_order_last_child >= 4 ~ \"4 and above\",\n      .default = as.character(birth_order_last_child)\n    )\n  )\n\nsurveys_new |> \n  select(birth_order_last_child, birth_order_last_child_grp) |> \n  table()\n\n                      birth_order_last_child_grp\nbirth_order_last_child    1    2    3 4 and above\n                    1  1225    0    0           0\n                    2     0  949    0           0\n                    3     0    0  650           0\n                    4     0    0    0         394\n                    5     0    0    0         232\n                    6     0    0    0         173\n                    7     0    0    0         100\n                    8     0    0    0          82\n                    9     0    0    0          29\n                    10    0    0    0          16\n                    11    0    0    0           9\n                    12    0    0    0           8"
  },
  {
    "objectID": "dplyr.html#aggregate",
    "href": "dplyr.html#aggregate",
    "title": "3  Data Wrangling",
    "section": "3.8 Aggregate",
    "text": "3.8 Aggregate\nWe often want to summarise data by aggregating the data. Here, we calculate the average age by residence.\n\nsurveys_new |> \n  group_by(residence) |> \n  summarize(mean_age = mean(age))\n\n# A tibble: 2 × 2\n  residence mean_age\n  <chr>        <dbl>\n1 Rural         31.1\n2 Urban         30.8\n\n\nNow, let’s get average age by residence and education.\n\nsurveys_new |> \n  group_by(residence, education) |> \n  summarize(mean_age = mean(age))\n\n`summarise()` has grouped output by 'residence'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 3\n# Groups:   residence [2]\n  residence education           mean_age\n  <chr>     <chr>                  <dbl>\n1 Rural     More than secondary     31.3\n2 Rural     No education            32.6\n3 Rural     Primary                 31.7\n4 Rural     Secondary               28.8\n5 Urban     More than secondary     31.4\n6 Urban     No education            33.7\n7 Urban     Primary                 31.6\n8 Urban     Secondary               29.8\n\n\nWe can also aggregate using multiple summary measures in one summarise() call. Now, let’s get average and minimum age by residence and education.\n\nsurveys_new |>\n  group_by(residence, education) |>\n  summarize(mean_age = mean(age),\n            min_age = min(age))\n\n`summarise()` has grouped output by 'residence'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 4\n# Groups:   residence [2]\n  residence education           mean_age min_age\n  <chr>     <chr>                  <dbl>   <dbl>\n1 Rural     More than secondary     31.3      21\n2 Rural     No education            32.6      15\n3 Rural     Primary                 31.7      15\n4 Rural     Secondary               28.8      16\n5 Urban     More than secondary     31.4      21\n6 Urban     No education            33.7      18\n7 Urban     Primary                 31.6      18\n8 Urban     Secondary               29.8      16\n\n\nSort the results by min_age.\n\nsurveys_new |>\n  group_by(residence, education) |>\n  summarize(mean_age = mean(age),\n            min_age = min(age)) |>\n  ungroup() |> \n  arrange(min_age)\n\n`summarise()` has grouped output by 'residence'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 4\n  residence education           mean_age min_age\n  <chr>     <chr>                  <dbl>   <dbl>\n1 Rural     No education            32.6      15\n2 Rural     Primary                 31.7      15\n3 Rural     Secondary               28.8      16\n4 Urban     Secondary               29.8      16\n5 Urban     No education            33.7      18\n6 Urban     Primary                 31.6      18\n7 Rural     More than secondary     31.3      21\n8 Urban     More than secondary     31.4      21\n\n\nSort the results by min_age in descending order.\n\nsurveys_new |>\n  group_by(residence, education) |>\n  summarize(mean_age = mean(age),\n            min_age = min(age)) |>\n  ungroup() |> \n  arrange(-min_age)\n\n`summarise()` has grouped output by 'residence'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 4\n  residence education           mean_age min_age\n  <chr>     <chr>                  <dbl>   <dbl>\n1 Rural     More than secondary     31.3      21\n2 Urban     More than secondary     31.4      21\n3 Urban     No education            33.7      18\n4 Urban     Primary                 31.6      18\n5 Rural     Secondary               28.8      16\n6 Urban     Secondary               29.8      16\n7 Rural     No education            32.6      15\n8 Rural     Primary                 31.7      15\n\n\n\n3.8.1 Practice\nFind out average, minimum, and maximum of number of children (last birth order) by education. Sort the data by average number of children in descending order.\n\nsurveys_new |>\n  group_by(education) |>\n  summarize(mean_child = mean(birth_order_last_child),\n            min_child = min(birth_order_last_child),\n            max_child = max(birth_order_last_child)) |>\n  ungroup() |> \n  arrange(-mean_child)\n\n# A tibble: 4 × 4\n  education           mean_child min_child max_child\n  <chr>                    <dbl>     <dbl>     <dbl>\n1 No education              4.11         1        12\n2 Primary                   3.03         1        12\n3 Secondary                 2.11         1        12\n4 More than secondary       1.63         1        10"
  },
  {
    "objectID": "dplyr.html#aggregate---count-the-number-of-rows",
    "href": "dplyr.html#aggregate---count-the-number-of-rows",
    "title": "3  Data Wrangling",
    "section": "3.9 Aggregate - count the number of rows",
    "text": "3.9 Aggregate - count the number of rows\nWe can use count() to count the number of rows based on one or more variables.\nHere, we count the number of mothers by employ.\n\nsurveys_new |>\n  count(employ)\n\n# A tibble: 6 × 2\n  employ           n\n  <chr>        <int>\n1 Agricultural   609\n2 Manual        1034\n3 Not working   1393\n4 Other          249\n5 Sales          573\n6 <NA>             9\n\n\ncount() is a shorthand for group_by() and summarise(), using n(). (See ?n for more details)\n\nsurveys_new |>\n  group_by(employ) |>\n  summarise(count = n())\n\n# A tibble: 6 × 2\n  employ       count\n  <chr>        <int>\n1 Agricultural   609\n2 Manual        1034\n3 Not working   1393\n4 Other          249\n5 Sales          573\n6 <NA>             9\n\n\nWe can sort the count in descending order by changing sort argument to TRUE (default is FALSE).\n\nsurveys_new |>\n  count(employ, sort = TRUE)\n\n# A tibble: 6 × 2\n  employ           n\n  <chr>        <int>\n1 Not working   1393\n2 Manual        1034\n3 Agricultural   609\n4 Sales          573\n5 Other          249\n6 <NA>             9\n\n\nWe can count by more than one variable. Here we count by residence and employ.\n\nsurveys_new |>\n  count(residence, employ)\n\n# A tibble: 12 × 3\n   residence employ           n\n   <chr>     <chr>        <int>\n 1 Rural     Agricultural   583\n 2 Rural     Manual         869\n 3 Rural     Not working   1059\n 4 Rural     Other          120\n 5 Rural     Sales          350\n 6 Rural     <NA>             5\n 7 Urban     Agricultural    26\n 8 Urban     Manual         165\n 9 Urban     Not working    334\n10 Urban     Other          129\n11 Urban     Sales          223\n12 Urban     <NA>             4\n\n\n\n3.9.1 Practice\n\nEnumerate eligible mothers surveyed by their education attainment?\n\n\nsurveys_new |> count(education)\n\n# A tibble: 4 × 2\n  education               n\n  <chr>               <int>\n1 More than secondary   302\n2 No education          622\n3 Primary              1698\n4 Secondary            1245\n\n\n\nCount the mothers surveys_new by state_region and their wealth quantile?\n\n\nsurveys_new |> count(state_region, wealth)\n\n# A tibble: 10 × 3\n   state_region wealth      n\n   <chr>        <chr>   <int>\n 1 Region       Fourth    338\n 2 Region       Highest   317\n 3 Region       Lowest    499\n 4 Region       Second    451\n 5 Region       Third     367\n 6 State        Fourth    289\n 7 State        Highest   243\n 8 State        Lowest    561\n 9 State        Second    411\n10 State        Third     391\n\n\n\nWhat was the oldest age of mothers in each type of health facility where they gave birth (ancplace)? Sort the maximum age in descending order.\n\n\nsurveys_new |> \n  group_by(ancplace) |> \n  summarise(age_max = max(age)) |> \n  ungroup() |> \n  arrange(-age_max)\n\n# A tibble: 5 × 2\n  ancplace                                 age_max\n  <chr>                                      <dbl>\n1 None                                          49\n2 Home                                          48\n3 Public health facilities                      48\n4 Mixed                                         46\n5 Private health facilities or NGO clinics      46"
  },
  {
    "objectID": "dplyr.html#export-data",
    "href": "dplyr.html#export-data",
    "title": "3  Data Wrangling",
    "section": "3.10 Export data",
    "text": "3.10 Export data\nWe can use write_csv() to save the dataframe as a CSV file.\n\nwrite_csv(surveys_new, \"data/surveys_new.csv\")\n\nYou can download surveys_new.csv file through this link for further analysis."
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "4  Resources",
    "section": "",
    "text": "Data Carpentry: Data Analysis and Visualization in R for Ecologists\nR for data science\nQuarto website\ngtsummary package website\ngt package website\nflextable manual website\nggplot2: Elegant Graphics for Data Analysis\nThe Epidemiologist R Handbook"
  }
]